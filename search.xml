<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Typora修改CSS</title>
    <url>/2020/09/06/Typora%E4%BF%AE%E6%94%B9CSS/</url>
    <content><![CDATA[<p><strong>这一期给大家讲讲怎样将Typora设置成自己喜欢的风格，这里以高亮颜色为例！</strong></p>
<blockquote>
<p>打开 视图–&gt;开发者工具（快捷键 Shift+F12）得到网页元素：</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/082.png" alt="image-20200828154027327"></p>
<a id="more"></a>

<blockquote>
<p>点亮这个图标：</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/083.png" alt="image-20200828154137307"></p>
<blockquote>
<p>移动鼠标至想要修改样式的地方，点击一次</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/084.png" alt="image-20200828154549041"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/085.png" alt="image-20200828154851984"></p>
<blockquote>
<p>一般有两种类型的地址，第一种：</p>
</blockquote>
<ul>
<li>这种地址就直接按照地址中的位置寻找css文件，打开之后如图查找样式名即可</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/086.png" alt="image-20200828154927107"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/087.png" alt="image-20200828155231370"></p>
<blockquote>
<p>第二种：</p>
</blockquote>
<ul>
<li>这种地址存放在<code>C:\Users\Acer\AppData\Roaming\Typora\themes</code> 目录下，修改此处才有效</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/088.png" alt="image-20200828155004523"></p>
<blockquote>
<p>最后修改完成重启Typora即可。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>个性化设置</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue开发环境配置</title>
    <url>/2020/09/06/2.Vue%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1-Node-js下载"><a href="#1-Node-js下载" class="headerlink" title="1.Node.js下载"></a>1.Node.js下载</h2><p><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p>
<ul>
<li>直接选择.msi 64位安装包下载并且直接安装即可，安装过程略</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/048.png" alt="image-20200903133908554"></p>
<a id="more"></a>


<ul>
<li>注意：选择自动添加到path路径，接着直接往下走不用更改；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/049.png" alt="image-20200903134106262"></p>
<ul>
<li>检查是否安装成功：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v 查看能否正常打印出版本号</span><br><span class="line">npm -v 安装node.js会自动安装npm包，同样查看即可</span><br><span class="line">npm是一个软件包管理工具，用于下载安装</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/050.png" alt="image-20200903142018014"></p>
<hr>
<h2 id="2-安装淘宝镜像加速器（cnpm）"><a href="#2-安装淘宝镜像加速器（cnpm）" class="headerlink" title="2.安装淘宝镜像加速器（cnpm）"></a>2.安装淘宝镜像加速器（cnpm）</h2><ul>
<li>cnpm下载国外程序可能无法正常使用，所以一般都使用npm下载，npm下载无用时再使用cnpm</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install cnpm -g -g是全局安装，建议直接全局安装，安装需要花费一定时间，如果不成功就多次重新安装</span><br><span class="line"></span><br><span class="line">npm install --registry=https://registry.npm.taobao.org 或者每次下载时使用此参数可以单词调用加速器</span><br></pre></td></tr></table></figure>

<p>安装之后的路径：<code>C:\Users\Acer\AppData\Roaming\npm\node_modules\cnpm</code></p>
<ul>
<li>同时与该加速器同级目录下还需下载其它模板：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/051.png" alt="image-20200903142549464"></p>
<h2 id="3-安装vue-cli"><a href="#3-安装vue-cli" class="headerlink" title="3.安装vue-cli"></a>3.安装vue-cli</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install vue-cli -g </span><br></pre></td></tr></table></figure>

<ul>
<li><p>vue-cli官方提供的一个脚手架，用于快速生成一个vue的项目模板;预先定义好的目录结构及基础代码，就好比咱们在创建Maven项目时可以选择创建一个骨架项目，这个骨架项目就是脚手架,我们的开发更加的快速；也是接下来主要使用的部分；</p>
</li>
<li><p>主要的功能：</p>
<ul>
<li>统一的目录结构</li>
<li>本地调试</li>
<li>热部署</li>
<li>单元测试</li>
<li>集成打包上线</li>
</ul>
</li>
<li><p>安装成功后使用<code>vue list</code>命令可以查看模板：</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/052.png" alt="image-20200903143231971"></p>
<ul>
<li>如果无法显示该目录，则需要重新配置网络，重启电脑或者开启手机热点切换网络再重试，原因是网络问题，可多次重连尝试；</li>
</ul>
<h2 id="4-使用vue-cli创建vue程序"><a href="#4-使用vue-cli创建vue程序" class="headerlink" title="4.使用vue-cli创建vue程序"></a>4.使用vue-cli创建vue程序</h2><ul>
<li>先切换命令提示符路径至目标路径；</li>
<li>使用命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init webpack myvue 其中myvue为创建文件名</span><br></pre></td></tr></table></figure>

<ul>
<li><p>加载一会后会出现一系列相关信息，项目名、项目描述等都可以直接回车，使用默认信息即可，之后作者名可以自己更改，再往后Vue build选项选择第一项即可，之后所有选项直接选择 n，表示我们会手动部署其它文件（选择y就会自动部署）；</p>
</li>
<li><p>再进入新文件中：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myvue</span><br></pre></td></tr></table></figure>

<ul>
<li>进入之后安装模板依赖：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install 自动安装固定依赖</span><br></pre></td></tr></table></figure>

<ul>
<li>接着使用命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev 用于部署服务器，每次运行时都需使用该命令部署服务器</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/053.png" alt="image-20200903144930303"></p>
<ul>
<li>部署成功之后可通过端口8080直接访问：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/054.png" alt="image-20200903145037697"></p>
<ul>
<li>ctrl+c可选择关闭服务器；</li>
</ul>
<hr>
<h2 id="5-IDEA初步认识文件"><a href="#5-IDEA初步认识文件" class="headerlink" title="5.IDEA初步认识文件"></a>5.IDEA初步认识文件</h2><ul>
<li>使用IDEA打开上述新项目，目录结构如图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/055.png" alt="image-20200903145259594"></p>
<ul>
<li><p>目录结构具体功能：</p>
<ul>
<li>index.html：是程序的主入口，内容不能随意修改：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/056.png" alt="image-20200903150423965"></p>
<ul>
<li>static：存放静态资源，如css、js、图片等；</li>
<li>src：开发项目区域：<ul>
<li>main.js：入口</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/057.png" alt="image-20200903150540591"></p>
<ul>
<li>package.json：打包时需要构建的版本信息等，不需修改；</li>
<li>node_modules：存放之前下载的依赖组件；</li>
<li>其余先不细讲，用到时再看；</li>
</ul>
</li>
</ul>
<h2 id="6-安装webpack"><a href="#6-安装webpack" class="headerlink" title="6.安装webpack"></a>6.安装webpack</h2><ul>
<li>安装指令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br><span class="line">npm install webpack-cli -g</span><br></pre></td></tr></table></figure>

<ul>
<li>测试安装成功：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack -v</span><br><span class="line">webpack-cli -v</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/058.png" alt="image-20200903165916564"></p>
<h2 id="7-安装vue-router"><a href="#7-安装vue-router" class="headerlink" title="7.安装vue-router"></a>7.安装vue-router</h2><ul>
<li>安装指令（需要在项目目录下执行）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>发生错误按照提示执行指令即可：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/061.png" alt="image-20200904115933531"></p>
<ul>
<li>成功安装到模板内：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/062.png" alt="image-20200904120407376"></p>
<h2 id="8-npm安装命令详解"><a href="#8-npm安装命令详解" class="headerlink" title="8.npm安装命令详解"></a>8.npm安装命令详解</h2><ul>
<li><code>npm install moduleName</code> :安装模块到项目目录下</li>
<li><code>npm install -g moduleName</code> : -g 的意思是将模块安装到全局，具体安装到磁盘哪个位置，要看npm config prefix的位置</li>
<li><code>npm install -save-dev moduleNam e</code>: –save-dev的意思是将模块安装到项目目录下，并在package文件的devDependencies 节点写入依赖，-D为该命令的缩</li>
<li><code>npm install -save moduleName</code> : –save的意思是将模块安装到项目目录下，并在package文件的dependencies 节点写入依赖，-S为该命令的缩写</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy简要入门</title>
    <url>/2020/09/10/scrapy%E7%AE%80%E8%A6%81%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-安装scrapy"><a href="#1-安装scrapy" class="headerlink" title="1.安装scrapy"></a>1.安装scrapy</h2><ul>
<li>在cmd下一条语句即可完成安装；</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>



<blockquote>
<p>据说在安装过程中可能遇到各种问题，由于我自己并没有遇到，所以略过，出现问题请自行百度</p>
</blockquote>
<ul>
<li>直接在命令行输入<code>scrapy</code>可以查看相关指令：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/089.png" alt="image-20200909084009265"></p>
<ul>
<li>输入<code>scrapy bench</code>用来验证安装是否成功，出现error则未成功，请自行百度解决方法；</li>
</ul>
<hr>
<h2 id="2-scrapy原理"><a href="#2-scrapy原理" class="headerlink" title="2.scrapy原理"></a>2.scrapy原理</h2><ul>
<li>直接上图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/090.png" alt="image-20200910212314248"></p>
<ul>
<li>讲解一下整个项目运行的过程，看完整篇博客再回来这里更有收获哟~<ul>
<li>Spiders文件即为我们主要编写逻辑代码的区域，也就是爬虫文件；</li>
<li>最初start_urls网址请求（request）被发送给引擎（Scrapy Engine）；</li>
<li>引擎通过判断这是一段网址请求而又将网址请求发送给调度器（Scheduler）；</li>
<li>调度器将网址请求进行入队操作（可能有很多网址）排好队再重新发回引擎；</li>
<li>引擎将入队之后再出队的网址请求发送给下载器（Downloader）；</li>
<li>下载器直接从Inernet中下载请求网址对应的网页源代码，即HTML代码，这段代码被称为响应（response），没错就是后续代码中使用的response，下载器将响应返回给引擎；</li>
<li>引擎再将响应返回给爬虫文件（Spiders）；</li>
<li>爬虫文件经过逻辑处理之后，再次发送请求给引擎，但这段请求可能是网址，如果是网址请求则再次重复上述过程，但也可能是数据，如果是数据，则引擎在接受到数据之后则将其转发给管道文件（Pipeline）；</li>
<li>最终由管道文件来确定是否将数据输出并且输出成何种类型的文件，也就是我们后面讲到的pipelines.py中的逻辑操作；</li>
</ul>
</li>
</ul>
<h2 id="3-创建项目（直接上手实例）"><a href="#3-创建项目（直接上手实例）" class="headerlink" title="3.创建项目（直接上手实例）"></a>3.创建项目（直接上手实例）</h2><ul>
<li>在cmd中进入文件所在位置，再执行指令用于创建项目：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scrapy startproject 项目名	项目名一般由爬取网站的网站域名去除后缀再加上Spider单词组成</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是我的实际执行命令，爬取网站为 http://www.itcast.cn/</span></span><br><span class="line">scrapy startproject itcast</span><br></pre></td></tr></table></figure>



<h2 id="4-创建爬虫"><a href="#4-创建爬虫" class="headerlink" title="4.创建爬虫"></a>4.创建爬虫</h2><ul>
<li>进入新建的项目目录，执行命令用于创建爬虫文件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># scrapy genspider 爬虫文件 网站域名</span></span><br><span class="line"><span class="comment"># 爬虫文件不要和项目名相同，规范是直接使用项目名去除Spider之后的单词，而网站域名则是爬虫采集的域名，即只有在此域名之下的网址才能被采集到，可以在文件中修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实际执行命令</span></span><br><span class="line">scrapy genspider itcast itcast.cn</span><br></pre></td></tr></table></figure>



<h2 id="5-项目结构"><a href="#5-项目结构" class="headerlink" title="5.项目结构"></a>5.项目结构</h2><ul>
<li>如图所示：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/091.png" alt="image-20200909092153091"></p>
<ul>
<li>目录结构：<ul>
<li>spiders.data5u.py：爬虫文件，主要编写逻辑区域；</li>
<li>_ init_.py：初始化文件，一般不需要修改；</li>
<li>items.py：定义数据结构体；</li>
<li>middlewares：中间件文件；</li>
<li>pipelines.py：管道文件，从该文件中将数据传输保存为json、xls等文件；</li>
<li>settings.py：配置文件；</li>
</ul>
</li>
</ul>
<h2 id="6-爬虫开始"><a href="#6-爬虫开始" class="headerlink" title="6.爬虫开始"></a>6.爬虫开始</h2><h3 id="6-1-解析爬虫类"><a href="#6-1-解析爬虫类" class="headerlink" title="6.1 解析爬虫类"></a>6.1 解析爬虫类</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建爬虫类 继承自scrapy.Spider 也就是原理中的Spider爬虫文件类，是一个基础类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;itcast&#x27;</span>     <span class="comment">#爬虫名</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;itcast.cn&#x27;</span>]     <span class="comment">#允许爬取的域名范围</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.itcast.cn/channel/teacher.shtml&#x27;</span>]        <span class="comment">#最初请求url的地址</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># 用来处理start_urls地址对应的请求响应</span></span><br></pre></td></tr></table></figure>



<h3 id="6-2-Selectors选择器"><a href="#6-2-Selectors选择器" class="headerlink" title="6.2 Selectors选择器"></a>6.2 Selectors选择器</h3><ul>
<li>是scrapy提取数据的一套机制，通过特定的XPath或者CSS表达式来选去HTML中的某个部分；</li>
<li>Selector四个基本方法：<ul>
<li>正则表达式：暂不涉及；</li>
<li>xpath()：传入xpath()表达式，返回该表达式所对应的所有节点的selector list列表；</li>
<li>css()：传入css表达式，返回该表达式所对应的所有节点的selector list列表；</li>
<li>extract()：序列化该节点unicode字符串并返回list()，与get()使用效果相似；</li>
</ul>
</li>
<li>一般使用正则表达式和xpath即可，xpath请自行百度菜鸟或w3；</li>
</ul>
<h3 id="6-3-response-xpath"><a href="#6-3-response-xpath" class="headerlink" title="6.3 response.xpath"></a>6.3 response.xpath</h3><ul>
<li>response是返回的响应，使用xpath对返回的数据进行选择：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    <span class="comment"># 用来处理start_urls地址对应的请求响应</span></span><br><span class="line">    retName = response.xpath(<span class="string">&#x27;//*[@class=&quot;main_bot&quot;]/h2/text()&#x27;</span>)</span><br><span class="line">    print(retName)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>xpath是如何选择的呢：</p>
<ul>
<li>进入到start_urls网页（这本就是parse函数最初得到的相应数据），具体请自行学习xpath：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/095.png" alt="image-20200910201738870"></p>
</li>
</ul>
<ul>
<li>可以在cmd进入该项目目录中执行，也可直接在PyCharm Terminal执行：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#scrapy crawl 爬虫名</span></span><br><span class="line">scrapy crawl itcast</span><br></pre></td></tr></table></figure>

<ul>
<li>得到结果：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/092.png" alt="image-20200910195843555"></p>
<h3 id="6-4-LOG-LEVEL日志信息"><a href="#6-4-LOG-LEVEL日志信息" class="headerlink" title="6.4 LOG_LEVEL日志信息"></a>6.4 LOG_LEVEL日志信息</h3><ul>
<li>从上图中看见很多额外的信息，在<code>settings.py</code>文件中添加以下代码过滤日志信息：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LOG_LEVEL = <span class="string">&#x27;WARNING&#x27;</span></span><br><span class="line"><span class="comment"># 该语句含义为只显示警告及以上级别（ERROR）的日志信息</span></span><br><span class="line"><span class="comment"># 日志信息有四个等级，从低到高分别为 DEBUG-&gt;INFO-&gt;WARNING-&gt;ERROR</span></span><br><span class="line"><span class="comment"># 对应含义为 					调试信息-&gt;普通信息-&gt;警告-&gt;错误</span></span><br></pre></td></tr></table></figure>

<ul>
<li>重新执行上述代码可以看到已经只剩下输出信息：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/093.png" alt="image-20200910200554769"></p>
<h3 id="6-5-extract"><a href="#6-5-extract" class="headerlink" title="6.5 extract()"></a>6.5 extract()</h3><ul>
<li>根据6.3中使用的语句<code>/text()</code>应该返回的结果是具体的文本内容，也就是上图中的<code>data</code>数据部分，但是却发现不经处理直接返回的数据是整个<code>&lt;Selector&gt;</code>列表，此时应该使用 <code>extract()</code>函数处理得到具体数据的列表值：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    <span class="comment"># 用来处理start_urls地址对应的请求响应</span></span><br><span class="line">    retNames = response.xpath(<span class="string">&#x27;//*[@class=&quot;main_bot&quot;]/h2/text()&#x27;</span>).extract()</span><br><span class="line">    print(retName)</span><br></pre></td></tr></table></figure>

<ul>
<li>再次执行就可以得到想要的信息啦：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/094.png" alt="image-20200910201223556"></p>
<h3 id="6-6-分组处理数据"><a href="#6-6-分组处理数据" class="headerlink" title="6.6 分组处理数据"></a>6.6 分组处理数据</h3><ul>
<li>刚刚我们获得的数据是在具体节点下所有的<code>h2</code>文本数据列表，但如果我们要将所有对应的数据进行分组呢？</li>
<li>只要使用一个变量用来存储所有的<code>&lt;Selector&gt;</code>列表（注意此处不能接extract()函数，否则得到的列表并不是响应数据<code>response</code>的类型则不能再下面调用），再使用for循环遍历列表中所有节点并依次获取数据即可：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">    li_list = response.xpath(<span class="string">&#x27;//*[@class=&quot;clears&quot;]/li&#x27;</span>)</span><br><span class="line">    <span class="comment">#不能使用extract()，否则类型不同于response响应类型，则不能被循环调用</span></span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        item = &#123;&#125;	<span class="comment">#定义字典变量用来存储数据</span></span><br><span class="line">        item[<span class="string">&quot;name&quot;</span>] = li.xpath(<span class="string">&#x27;./div[2]/h2/text()&#x27;</span>).extract()	<span class="comment">#. 表示从当前节点开始取</span></span><br><span class="line">        item[<span class="string">&quot;level&quot;</span>] = li.xpath(<span class="string">&#x27;./div[2]/h2/span/text()&#x27;</span>).extract()</span><br><span class="line">        print(item)</span><br></pre></td></tr></table></figure>

<ul>
<li>得到结果如图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/096.png" alt="image-20200910203824629"></p>
<ul>
<li><p>但是却发现输出数据的最前头和最后头都分别有四个空数据，这是为什么？</p>
</li>
<li><p>回顾刚刚代码中的<code>xpath(&#39;//*[@class=&quot;clears&quot;]/li&#39;)</code>，发现原网页中class属性不唯一！如图所示一共有四处节点使用了该class属性，而我们需要获取数据的节点只有一处，此处需要注意，class属性值并不唯一，可能被其它地方引用而导致我们获取无用数据：</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/097.png" alt="image-20200910204220189"></p>
<ul>
<li>修改之后代码如下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">	<span class="comment">#只需要修改父节点一处即可</span></span><br><span class="line">    li_list = response.xpath(<span class="string">&#x27;//*[@class=&quot;maincon&quot;]/ul/li&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        item = &#123;&#125;	<span class="comment">#定义字典变量用来存储数据</span></span><br><span class="line">        item[<span class="string">&quot;name&quot;</span>] = li.xpath(<span class="string">&#x27;./div[2]/h2/text()&#x27;</span>).extract()</span><br><span class="line">        item[<span class="string">&quot;level&quot;</span>] = li.xpath(<span class="string">&#x27;./div[2]/h2/span/text()&#x27;</span>).extract()</span><br><span class="line">        print(item)</span><br></pre></td></tr></table></figure>
<ul>
<li>如图所示，成功解决问题：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/098.png" alt="image-20200910204627728"></p>
<h3 id="6-7-pipelines管道文件简要介绍"><a href="#6-7-pipelines管道文件简要介绍" class="headerlink" title="6.7 pipelines管道文件简要介绍"></a>6.7 pipelines管道文件简要介绍</h3><ul>
<li>刚刚我们获取的数据都是通过<code>print()</code>函数直接打印在终端上，那么接下来我们就要将这些文件通过pipelins管道文件传输出来，暂时也是使用<code>print()</code>，此处主要是简要讲述pipelines管道文件；</li>
<li>管道文件其实早就初始化在我们的spider文件中，也就是其中的pipelines.py文件，但在正式使用之前，需要到settings.py文件中进行配置：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在settings.py文件中找到被注释掉的这段代码并去掉注释即可使用</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="comment">#其中该字典元素的键名即为pipelines.py文件中的类名路径，后面的值300表示距离管道文件的距离，距离越近值越小表示越先经过该文件，可以设置多个值，通过不同的键值确定其顺序</span></span><br><span class="line">   <span class="string">&#x27;spiderStudy.pipelines.SpiderstudyPipeline&#x27;</span>: <span class="number">300</span>,</span><br><span class="line">   <span class="string">&#x27;spiderStudy.pipelines.SpiderstudyPipeline1&#x27;</span>: <span class="number">301</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置完成后先在爬虫文件中将获取的数据返回给<code>pipelines.py</code>文件，只要通过一条语句即可完成：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    item = &#123;&#125;   <span class="comment">#定义字典变量用来存储数据</span></span><br><span class="line">    item[<span class="string">&quot;name&quot;</span>] = li.xpath(<span class="string">&#x27;./div[2]/h2/text()&#x27;</span>).extract()</span><br><span class="line">    item[<span class="string">&quot;level&quot;</span>] = li.xpath(<span class="string">&#x27;./div[2]/h2/span/text()&#x27;</span>).extract()</span><br><span class="line">    <span class="keyword">yield</span> item</span><br></pre></td></tr></table></figure>

<ul>
<li>最后在<code>pipelines.py</code>文件中编写逻辑代码：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderstudyPipeline</span>:</span></span><br><span class="line">    <span class="comment"># 该函数为默认接收并执行逻辑数据的函数，不可修改</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        <span class="comment"># 对所有返回的字典增加一个键值对</span></span><br><span class="line">        item[<span class="string">&quot;hello&quot;</span>] = <span class="string">&quot;world&quot;</span></span><br><span class="line">        <span class="comment"># 函数结束后必须返回其值，否则无法继续使用</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderstudyPipeline1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        print(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure>

<ul>
<li>执行代码得到结果便可知其妙用：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/099.png" alt="image-20200910210416661"></p>
<ul>
<li>结束之后我们再重新回过头看一下爬虫文件中的<code>yield item</code>语句，这段语句放在for循环之内，表示每次得到一对数据就返回给管道文件一次，那么可不可以将含有所有元素的字典列表一次性返回给管道文件呢？我们来尝试一下：</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#新建一个list变量用于存储所有的item值</span></span><br><span class="line">content_list = []</span><br><span class="line">        <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">            item = &#123;&#125;   <span class="comment">#定义字典变量用来存储数据</span></span><br><span class="line">            item[<span class="string">&quot;name&quot;</span>] = li.xpath(<span class="string">&#x27;./div[2]/h2/text()&#x27;</span>).extract()</span><br><span class="line">            item[<span class="string">&quot;level&quot;</span>] = li.xpath(<span class="string">&#x27;./div[2]/h2/span/text()&#x27;</span>).extract()</span><br><span class="line">            content_list.append(item)</span><br><span class="line">        <span class="keyword">yield</span> content_list</span><br></pre></td></tr></table></figure>

<ul>
<li>输出结果为：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/100.png" alt="image-20200910211436369"></p>
<ul>
<li>直接报错，由此可知不能一次性返回一个列表；</li>
</ul>
<blockquote>
<p>其实最后可以总结一下yield传输值给pipelines.py文件时的过程，pipelines.py文件是对于每一次yield返回值都会进行一次逻辑运算的，而yield自身只能传输请求、字典或者None值，而不能传输list列表。</p>
</blockquote>
<blockquote>
<p>最后再讲一下extract()函数，这个函数调用时是直接返回list列表取得的所有值，而我们在分组单次数据获取时只需要获取一个值便可，一般会使用extract()[0]（获取数组中第一个值）来替代上述写法，但是extract()[0]有一个弊端就是如果列表中没有值不会返回任何值（连空字符串都没有），但yield却不能返回这种类型的值而会导致报错，于是我们更常用extract_first()来替代上一种写法，这种写法在列表中没有值时会返回一个None字符串，可以直接被yield传输    </p>
</blockquote>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/09/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hero等静态网站通过外部cdn引用图片</title>
    <url>/2020/09/10/hero%20Img%E9%80%9A%E8%BF%87%E5%85%8D%E8%B4%B9cdn%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<blockquote>
<p>hexo在上传静态网页的时候markdown文本中的图片却一直无法显示，这个问题如何解决呢？</p>
</blockquote>
<h2 id="1-原因"><a href="#1-原因" class="headerlink" title="1.原因"></a>1.原因</h2><ul>
<li>hexo只能上传md文本资源，并且最终转化为静态网页，而同级目录下的Img图片资源却无法上传至服务器；</li>
</ul>
<h2 id="2-解决办法"><a href="#2-解决办法" class="headerlink" title="2.解决办法"></a>2.解决办法</h2><ul>
<li>通过使用外部cdn引用图片即可完美地解决这个问题！但是像七牛云那些大型cdn网站都需要付费使用，这里给大家推荐一个免费且超级好用的cdn加速器：<a href="https://www.jsdelivr.com/">https://www.jsdelivr.com</a></li>
<li>要使用外部cdn引用，必须先将图片从自己个人电脑上传至网站服务器上，这里我们选择github服务器；</li>
</ul>
<h3 id="2-1-上传图片至github仓库"><a href="#2-1-上传图片至github仓库" class="headerlink" title="2.1 上传图片至github仓库"></a>2.1 上传图片至github仓库</h3><ul>
<li><p>在github上新建仓库，参考博客：<a href="https://blog.csdn.net/weixin_44339531/article/details/103642380">https://blog.csdn.net/weixin_44339531/article/details/103642380</a></p>
</li>
<li><p>在<code>MyHexo</code>文件夹下新建一个文件夹<code>cdn</code>，在<code>cdn</code>文件夹下新建文件<code>CDNBlog</code>专门用来上传博客图片；</p>
</li>
<li><p>在<code>CDNBlog</code>文件目录下打开git bash，通过以下几个命令完成上传：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动将所有已经修改或者新增的文件添加到远程库中</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 添加更新信息，message为更新信息</span></span><br><span class="line">git commit -m <span class="string">&quot;message&quot;</span></span><br><span class="line"><span class="comment"># 将远程库中的文件更新到远程master中</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<blockquote>
<p>高能预警！！！</p>
</blockquote>
<ul>
<li>最后这一行命令可能出现以下问题：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git@github.com: Permission denied (publickey). fatal: Could not <span class="built_in">read</span> from remote repository.</span><br></pre></td></tr></table></figure>

<ul>
<li>如果出现这样的场景，请执行以下操作：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment"># your_email@example.com 是你自己github绑定的邮箱</span></span><br><span class="line"><span class="comment"># 接着直接以默认路径文件存储到文件中，这个地方亲身试险！！！不能修改默认路径文件名</span></span><br><span class="line"><span class="comment"># 应该是github默认ssh只能配置此文件，可能可以修改该配置，但这里我免得麻烦直接回车</span></span><br><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># 再使用此命令复制下公钥密匙，将此密匙添加到github中，本文前面的链接有细讲</span></span><br><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="comment"># 使用此命令可以显示出正确的信息即可</span></span><br></pre></td></tr></table></figure>

<ul>
<li>完成这些操作之后重新git push应该就成功了；</li>
</ul>
<h3 id="2-2-markdown引用"><a href="#2-2-markdown引用" class="headerlink" title="2.2 markdown引用"></a>2.2 markdown引用</h3><ul>
<li>使用<code>https://cdn.jsdelivr.net/gh/</code>+github名+仓库名+图片路径 即可正常引用图片啦！</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>个性化设置</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础入门</title>
    <url>/2020/09/06/1.Vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><h3 id="1-1-概念介绍"><a href="#1-1-概念介绍" class="headerlink" title="1.1 概念介绍"></a>1.1 概念介绍</h3><ul>
<li>Vue 是一款渐进式JavaScript框架，所谓渐进式就是逐步实现新特性的意思，如实现模块化开发、路由、状态管理等新特性。其特点是综合了Angular（模块化）和React(虚拟DOM）的优点，与其它大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的核心库只关注视图层，不仅易于上手，还便于与第三方库(如: vue-router，vue-resource，vuex）或既有项目整合。</li>
</ul>
<a id="more"></a>

<h3 id="1-2-MVVM"><a href="#1-2-MVVM" class="headerlink" title="1.2 MVVM"></a>1.2 MVVM</h3><ul>
<li>Model:模型层，在这里表示JavaScript对象；</li>
<li>View:视图层，在这里表示DOM(HTML 操作的元素)；</li>
<li>ViewModel:连接视图和数据的中间件，Vue.js 就是MVVM中的ViewModel层的实现者</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/030.png" alt="image-20200830141507977"></p>
<ul>
<li>View层展现的不是Model层的数据，而是ViewModel的数据，由ViewNodel负责与 Model层交互，这就完全解耦了View层和Model层，这个解耦是至关重要的，它是前后端分离方案实施的重要一环。</li>
</ul>
<h3 id="1-3-搭配环境"><a href="#1-3-搭配环境" class="headerlink" title="1.3 搭配环境"></a>1.3 搭配环境</h3><ul>
<li><p>下载vue.js文件：</p>
<ul>
<li><a href="https://vuejs.org/js/vue.js">https://vuejs.org/js/vue.js</a></li>
<li><a href="https://vuejs.org/js/vue.min.js">https://vuejs.org/js/vue.min.js</a></li>
<li>上面一个是全包，下面一个是简化包，代码中引用一个就OK</li>
</ul>
</li>
<li><p>如果不下载到本地，可以使用<code>cdn</code>外部引入：</p>
<ul>
<li><pre><code class="html">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.min.js&quot;&gt;&lt;/script&gt;
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> 再在IDEA中 <span class="code">`settings-&gt;plugins`</span>中搜索安装vue.js：</span><br><span class="line">  ![<span class="string">image-20200830144613941</span>](<span class="link">https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/031.png</span>)</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 安装之后重启再设置下一步：</span><br><span class="line"></span><br><span class="line">![<span class="string">å¨è¿éæå¥å¾çæè¿°</span>](<span class="link">https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/032.png</span>)</span><br><span class="line"></span><br><span class="line">附模板：</span><br><span class="line"></span><br><span class="line"><span class="code">```vue</span></span><br><span class="line"><span class="code">&lt;template&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/template&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;script&gt;</span></span><br><span class="line"><span class="code">    export default &#123;</span></span><br><span class="line"><span class="code">        name:&quot;$&#123;NAME&#125;&quot;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;style scoped&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>注：上图与模板代码取自博客：<a href="https://blog.csdn.net/jdq8576/article/details/104055707/">https://blog.csdn.net/jdq8576/article/details/104055707/</a></p>
</blockquote>
<ul>
<li>然后就可以在IDEA文件中new一个Vue Component文件啦！</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/033.png" alt="image-20200830145017226"></p>
<hr>
<h2 id="2-基础语法"><a href="#2-基础语法" class="headerlink" title="2.基础语法"></a>2.基础语法</h2><h3 id="2-1-初步使用"><a href="#2-1-初步使用" class="headerlink" title="2.1 初步使用"></a>2.1 初步使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--展示格式--&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,		<span class="comment">//el属性用于绑定id号，且双向绑定，vm绑定id的同时，id也绑定了vm，使id视图层能随时取到vm的值</span></span></span><br><span class="line"><span class="javascript">        data: &#123;			<span class="comment">//data属性为数据存储区</span></span></span><br><span class="line"><span class="javascript">            message:<span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="comment">//页面内容能够随message数值改变而随时改变，不需要刷新页面</span></span></span><br><span class="line"><span class="javascript">vm.message = <span class="string">&#x27;hello zhaoxiaoan&#x27;</span></span></span><br><span class="line"><span class="javascript">&gt;<span class="string">&quot;hello zhaoxiaoan&quot;</span>  </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Vue常用的七个属性：<ul>
<li><code>el</code> ：占位符，用来绑定标签、id和class，指示编译器解析；</li>
<li><code>data</code> ：存放数据区域；</li>
<li><code>methods</code> ：存放方法逻辑区域；</li>
<li><code>render</code> ：创建Virtual Dom</li>
<li><code>computed</code> ：用于计算</li>
<li><code>watch</code> ：<ul>
<li>watch:function(new,old){}；</li>
<li>监听data中数据的变化；</li>
</ul>
</li>
<li><code>template</code> ：用来设置模板，替换页面元素，包括占位符；</li>
</ul>
</li>
</ul>
<h3 id="2-2-v-bind指令"><a href="#2-2-v-bind指令" class="headerlink" title="2.2 v-bind指令"></a>2.2 v-bind指令</h3><ul>
<li>该指令的含义是绑定信息，如 <code>v-bind:title=&quot;massage&quot;</code> 就是绑定了标题信息，将鼠标移动到<code>&lt;span&gt;</code>标签语句悬停可显示其绑定信息；</li>
<li><code>v-bind:</code>可以简写为 <code>:</code> ;</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用v-bind指令可以自动引入v-bind使用链接--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-bind</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v- 都是vue指令 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">&quot;massage&quot;</span>&gt;</span></span><br><span class="line">        鼠标悬停几秒查看此处绑定的信息</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            massage:<span class="string">&quot;hello,vue&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-3-if判断语句"><a href="#2-3-if判断语句" class="headerlink" title="2.3 if判断语句"></a>2.3 if判断语句</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;type===&#x27;A&#x27;&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type===&#x27;B&#x27;&quot;</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            type:<span class="string">&quot;A&quot;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-4-循环列表（重要）"><a href="#2-4-循环列表（重要）" class="headerlink" title="2. 4 ==循环列表（重要）=="></a>2. 4 ==循环列表（重要）==</h3><ul>
<li>列表配合for循环就可以简单实现从数据库中导出数据并且循环输出成列表展示；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--v-for=&quot;(item,index) in items&quot; 格式类似于forEach,定义item取items数组中每个元素,index取索引下标，不用可不取--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--item.message用于展示--&gt;</span></span><br><span class="line">        &#123;&#123;item.message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">//数组元素用来给列表li循环遍历</span></span></span><br><span class="line">            items: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>:<span class="string">&quot;hello,vue&quot;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>:<span class="string">&quot;hello zhaoxiaoan&quot;</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/034.png" alt="image-20200830153345031"></p>
<h3 id="2-5-v-on-绑定事件"><a href="#2-5-v-on-绑定事件" class="headerlink" title="2.5 v-on 绑定事件"></a>2.5 v-on 绑定事件</h3><ul>
<li><code>v-on:</code> 用来绑定事件，如事件<code>click</code> ，其余事件可以查找jQuery事件文档（可以自己创建新事件）；</li>
<li><code>v-on:</code>可以简写为 <code>@</code> ；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-on</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span> = <span class="string">&quot;sayHi&quot;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">//方法只能存放在methods中</span></span></span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            sayHi:<span class="function"><span class="keyword">function</span> (<span class="params">envent</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="built_in">this</span>.message);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/035.png" alt="image-20200830155311872"></p>
<hr>
<h2 id="3-双向绑定（重点）"><a href="#3-双向绑定（重点）" class="headerlink" title="3.双向绑定（重点）"></a>3.双向绑定（重点）</h2><ul>
<li>使用<code>v-model</code>指令；</li>
<li><code>v-model</code>指令会忽略所有表单元素的checked、selected等值，因此在下拉框中初始默认选择为空，必须设置一个disabled不可选中项并且设置其值为空来作为默认选择域；</li>
</ul>
<h3 id="3-1-文本"><a href="#3-1-文本" class="headerlink" title="3.1 文本"></a>3.1 文本</h3><ul>
<li>本质是<code>&#123;&#123;message&#125;&#125;</code>用来绑定<code>data&#123;message&#125;</code>显示内容，而<code>message</code>又通过<code>v-model=&quot;message&quot;</code>绑定了<code>&lt;input&gt;</code>文本域，所以当<code>&lt;input&gt;</code>输入框值域变化时修改了<code>data&#123;message&#125;</code>数据，接着<code>message</code>就跟着变化；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    输入的文本：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/036.png" alt="image-20200830164055648"></p>
<h3 id="3-2-textarea文本域"><a href="#3-2-textarea文本域" class="headerlink" title="3.2 textarea文本域"></a>3.2 textarea文本域</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    输入的文本：</span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>&gt;</span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,vue!&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/037.png" alt="image-20200830164801393"></p>
<h3 id="3-3-radio单选框"><a href="#3-3-radio单选框" class="headerlink" title="3.3 radio单选框"></a>3.3 radio单选框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    性别：</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/038.png" alt="image-20200830165053896"></p>
<h3 id="3-4-select下拉框"><a href="#3-4-select下拉框" class="headerlink" title="3.4 select下拉框"></a>3.4 select下拉框</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    下拉框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span> &gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择了：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/039.png" alt="image-20200830165542144"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/040.png" alt="image-20200830165627407"></p>
<hr>
<h2 id="4-组件"><a href="#4-组件" class="headerlink" title="4.组件"></a>4.组件</h2><ul>
<li>组件最大的作用就是其良好的复用性，但是复用性的本质只能复用框架外围，内在的本质数据必须从另一方获取，接下来讲述的就是获取数据的过程；</li>
</ul>
<h3 id="4-1-新建component组件"><a href="#4-1-新建component组件" class="headerlink" title="4.1 新建component组件"></a>4.1 新建component组件</h3><ul>
<li>给新组件命名为<code>zhaoxiaoan</code>；</li>
<li><code>template</code>为替换的模板内容；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;zhaoxiaoan&quot;</span>,&#123;</span><br><span class="line">    template: <span class="string">&#x27;&lt;li&gt;Hello&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//做好准备工作，绑定好id，存好数据</span></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        items: [<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Linux&quot;</span>,<span class="string">&quot;前端&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="4-2-使用新组件"><a href="#4-2-使用新组件" class="headerlink" title="4.2 使用新组件"></a>4.2 使用新组件</h3><ul>
<li>从绑好的Data中遍历取出数据；</li>
<li>并且使用<code>v-bind:itemX</code>绑定新变量<code>itemX</code>，并且将v-for遍历得到的数据赋值给新变量</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zhaoxiaoan</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:itemX</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">zhaoxiaoan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="4-3-将数据传入新组件"><a href="#4-3-将数据传入新组件" class="headerlink" title="4.3 将数据传入新组件"></a>4.3 将数据传入新组件</h3><ul>
<li>使用属性<code>props</code>接收新参数<code>itemX</code>此参数就是<code>v-bind</code>新定义并且绑定的那个变量，最终这个新变量传递给<code>template</code>模板中的<code>itemX</code>；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Vue.component(<span class="string">&quot;zhaoxiaoan&quot;</span>,&#123;</span><br><span class="line">    props:[<span class="string">&#x27;itemX&#x27;</span>],</span><br><span class="line">    template: <span class="string">&#x27;&lt;li&gt;&#123;&#123;itemX&#125;&#125;&lt;/li&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<blockquote>
<p>最终代码与运行结果如下：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--view层，模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">zhaoxiaoan</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">zhaoxiaoan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--导入vue.js包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;zhaoxiaoan&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        props:[<span class="string">&#x27;item&#x27;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            items: [<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Linux&quot;</span>,<span class="string">&quot;前端&quot;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/041.png" alt="image-20200830171934341"></p>
<hr>
<h2 id="5-Axios异步网络通信（重点）"><a href="#5-Axios异步网络通信（重点）" class="headerlink" title="5.Axios异步网络通信（重点）"></a>5.Axios异步网络通信（重点）</h2><h3 id="5-1-Axios简介"><a href="#5-1-Axios简介" class="headerlink" title="5.1 Axios简介"></a>5.1 Axios简介</h3><ul>
<li><p>Axios是一个开源的可以用在浏览器端和 Node3S 的异步通信框架，它的主要作用就是实现 AJAX异步通信，其功能特点如下:</p>
<ul>
<li>从浏览器中创建 <code>XMLHttpRequests</code></li>
<li>从 node.js 创建http请求</li>
<li>支持 Promise API [JS中链式编程]</li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换 JSON 数据</li>
<li>客户端支持防御 XSRF（跨站请求伪造)</li>
</ul>
</li>
<li><p>由于Vue.js是一个视图层框架并且作者（尤雨溪）严格准守SoC(关注度分离原则），所以Vue.js并不包含AJAX的通信功能，为了解决通信问题，作者单独开发了一个名为vue-resource的插件，不过在进入2.0版本以后停止了对该插件的维护并推荐了Axios框架。少用jQuery，因为它操作Dom太频繁</p>
</li>
</ul>
<h3 id="5-2-Vue实例生命周期图示介绍"><a href="#5-2-Vue实例生命周期图示介绍" class="headerlink" title="5.2 Vue实例生命周期图示介绍"></a>5.2 Vue实例生命周期图示介绍</h3><ul>
<li>这是一个Vue实例生命周期，在生命周期过程中会执行相应的“钩子函数”，这些“钩子函数”是可以被外部调用进而影响到整个实例的；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/042_lifecycle.png" alt="lifecycle"></p>
<h3 id="5-3-引入Axios"><a href="#5-3-引入Axios" class="headerlink" title="5.3 引入Axios"></a>5.3 引入Axios</h3><ul>
<li>外部cdn引入：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>官方文档安装Axios：</li>
</ul>
<p><a href="http://www.axios-js.com/zh-cn/docs/vue-axios.html">http://www.axios-js.com/zh-cn/docs/vue-axios.html</a></p>
<h3 id="5-4-模拟网络通信"><a href="#5-4-模拟网络通信" class="headerlink" title="5.4 模拟网络通信"></a>5.4 模拟网络通信</h3><ul>
<li>开发的接口大部分使用JSON格式，先在项目里模拟一段<code>JSON</code>数据：<ul>
<li>创建一个新文件命名为<code>data.json</code> ，数据如下：</li>
</ul>
</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;狂神说Java&quot;</span> ,</span><br><span class="line">  <span class="attr">&quot;url&quot;</span>:<span class="string">&quot;https://blog.kuangstudy.com&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;page&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;isNonProfit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">&quot;address&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;street&quot;</span>:<span class="string">&quot;含光门&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;city&quot;</span>:<span class="string">&quot;陕西西安&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;country&quot;</span> :<span class="string">&quot;中国&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">  <span class="attr">&quot;links&quot;</span> :[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;bilibili&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://space.bilibili.com/95256449&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;狂伸说java&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://blog.kuangstudy.com&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;百度&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://www.baidu.com/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>html文件代码如下：</p>
<ol>
<li><p>先写mounted()函数，在这个钩子函数中调用<code>axios.get()</code>获取json文件数据；</p>
</li>
<li><pre><code class="javascript">response=&gt;(this.info=response.data)
//这条语句是ES6新特性，=&gt;后面相当于函数内容，即请求响应后执行函数语句将请求响应的数据赋值给info
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">3.</span> ```javascript</span><br><span class="line">   //<span class="class"><span class="keyword">data</span>()函数return是将其中定义的键值对属性值在mounted调用之后返回给<span class="keyword">data</span>，实现<span class="keyword">data</span>属性的动态传递</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>再通过双向绑定在html中引用data属性的数值；</p>
</li>
<li><p>对于链接标签中链接的动态生成，则使用<code>v-bind</code>指令将href属性的值绑定为info.url，不能直接将<code>info.url</code>传递给<code>href</code>，否则只能识别为一串字符串；</p>
</li>
</ol>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:v-bind</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;vue&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;info.address.street&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;info.url&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&quot;#vue&quot;</span> ,</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            info: &#123;		<span class="comment">//json文件中的属性只有在此处同名定义之后，接收数据后才能被调用</span></span></span><br><span class="line"><span class="javascript">                name: <span class="literal">null</span>,</span></span><br><span class="line">                address: &#123;</span><br><span class="line"><span class="javascript">                    street: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    city: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">                    country: <span class="literal">null</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                url:<span class="literal">null</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    mounted()&#123;        <span class="comment">//钩子函数，链式编程</span></span></span><br><span class="line"><span class="javascript">        axios.get(<span class="string">&quot;../data.json&quot;</span>).then(<span class="function"><span class="params">response</span>=&gt;</span>(<span class="built_in">this</span>.info=response.data));</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>




<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/043.png" alt="image-20200902223854253"></p>
<ul>
<li>json文件在编码时没有使用UTF-8编译，所以上述请求执行后会得到乱码内容，解决方法是将json文件用notepad++打开之后在视窗栏 编码-&gt;使用UTF-8编码和转为UTF-8编码；</li>
</ul>
<hr>
<h2 id="6-计算属性"><a href="#6-计算属性" class="headerlink" title="6.计算属性"></a>6.计算属性</h2><ul>
<li><p>存在于computed属性中；</p>
</li>
<li><p>methods与computed属性中的函数名不能重名，否则优先调用methods中的函数而不会调用computed中的属性（定义为函数，调用为属性）；</p>
</li>
<li><p>调用方法时，每次都需要进行计算，既然有计算过程则必定产生系统开销，那如果这个结果是不经常变化的呢？此时就可以考虑将这个结果缓存起来，采用计算属性可以很方便的做到这一点，计算属性的主要特性就是为了将不经常变化的计算结果进行缓存，以节约我们的系统开销；</p>
</li>
<li><p>computed属性中的缓存只在数据发生增删改之后才会重新刷新变化，而methods内的函数随时变化；</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime1 &#123;&#123;currentTime1()&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--注意，调用methods内的函数使用函数调用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>currentTime2 &#123;&#123;currentTime2&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="comment">&lt;!--注意，调用computed内的函数使用属性调用--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span> ,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            message: <span class="string">&quot;hello,world&quot;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            currentTime1:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();<span class="comment">//返回一个时间戳</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed:&#123;</span><br><span class="line"><span class="javascript">            currentTime2:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.message;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">Date</span>.now();<span class="comment">//返回一个时间戳</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/044.png" alt="image-20200903102347608"></p>
<hr>
<h2 id="7-插槽slot"><a href="#7-插槽slot" class="headerlink" title="7.插槽slot"></a>7.插槽slot</h2><ul>
<li>插槽的本质就是嵌套组合复用；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-bind: 简略形式为 :        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--v-on: 简略形式为 @        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in todoItems&quot;</span> <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>,&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        /*template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>&#x27; +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    &#x27;<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>&#x27; +</span></span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;&lt;ul&gt;&#x27;</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">                        &#x27;<span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>&#x27; +</span></span></span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;&lt;/ul&gt;&#x27;</span> +</span></span><br><span class="line"><span class="javascript">                <span class="string">&#x27;&lt;/div&gt;&#x27;</span>*/</span></span><br><span class="line"><span class="javascript">        <span class="comment">//使用一个 \ 就可以直接换行</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//slot插槽通过name属性确定每一个slot插槽独一无二，在&lt;div&gt;中可通过此属性连接其它组件</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        props:[<span class="string">&quot;title&quot;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-items&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        props:[<span class="string">&quot;item&quot;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span> ,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;学习篇&quot;</span>,</span></span><br><span class="line"><span class="javascript">            todoItems:[<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Linux&quot;</span>,<span class="string">&quot;前端&quot;</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/045.png" alt="image-20200903110407351"></p>
<hr>
<h2 id="8-自定义事件分发"><a href="#8-自定义事件分发" class="headerlink" title="8.自定义事件分发"></a>8.自定义事件分发</h2><ul>
<li>实现在slot基础上的自定义删除事件；</li>
<li>具体问题及解决方式：<ul>
<li>component组件中定义事件函数，但是并不能直接修改vue实例内容<ul>
<li>间接，在vue实例中定义函数事件用于删除data数据内容；</li>
<li>将该事件<code>removeItem</code> 通过 <code>v-on</code> 绑定到自定义事件 <code>remove</code> 上；</li>
<li>再在component组件中通过<code>this.$emit(&#39;remove&#39;,index)</code>自定义事件分发传参并调用自定义事件<code>remove</code>；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--v-bind: 简略形式为 :        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--v-on: 简略形式为 @        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-title</span> <span class="attr">slot</span>=<span class="string">&quot;todo-title&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">todo-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">slot</span>=<span class="string">&quot;todo-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in todoItems&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">:index</span>=<span class="string">&quot;index&quot;</span> @<span class="attr">remove</span>=<span class="string">&quot;removeItem(index)&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">todo-items</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--引入js文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//使用一个 \ 就可以直接换行</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>\</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                   <span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//slot插槽通过name属性确定每一个slot插槽独一无二，在&lt;div&gt;中可通过此属性连接其它组件</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-title&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        props:[<span class="string">&quot;title&quot;</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&quot;todo-items&quot;</span>,&#123;</span></span><br><span class="line"><span class="javascript">        props:[<span class="string">&quot;item&quot;</span>,<span class="string">&quot;index&quot;</span>],<span class="comment">//传入两个参数</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">li</span>&gt;</span>--</span><span class="template-variable">&#123;&#123;<span class="name">index</span>&#125;&#125;</span><span class="xml">--</span><span class="template-variable">&#123;&#123;<span class="name">item</span>&#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;remove(index)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            remove: <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$emit(<span class="string">&#x27;remove&#x27;</span>,index);<span class="comment">//自定义事件固定调用格式</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&quot;#app&quot;</span> ,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="javascript">            title: <span class="string">&quot;学习篇&quot;</span>,</span></span><br><span class="line"><span class="javascript">            todoItems:[<span class="string">&quot;Java&quot;</span>,<span class="string">&quot;Linux&quot;</span>,<span class="string">&quot;前端&quot;</span>]</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line"><span class="javascript">            removeItem:<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.todoItems.splice(index,<span class="number">1</span>);<span class="comment">//从index索引删除一个数组元素</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>点击删除按钮能够动态删除data数据并且刷新页面显示：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/046.png" alt="image-20200903121218463"></p>
<blockquote>
<p>关系示意图：最终都是通过前端的view视图来连接</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/047.png" alt="QQ图片20200903120909"></p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue开发实例演示</title>
    <url>/2020/09/06/3.vue%E5%BC%80%E5%8F%91%E5%AE%9E%E4%BE%8B%E6%BC%94%E7%A4%BA/</url>
    <content><![CDATA[<h2 id="1-解剖初始化模板"><a href="#1-解剖初始化模板" class="headerlink" title="1.解剖初始化模板"></a>1.解剖初始化模板</h2><h3 id="1-1-vue文件"><a href="#1-1-vue文件" class="headerlink" title="1.1 vue文件"></a>1.1 vue文件</h3><ul>
<li>如图所示，对于一个新建的vue文件而言，其中标签分为三个部分：<ul>
<li>template标签：这一块模板区域用于编写html代码块，其实就是component组建中的template属性内容，用作模板显示，而这个模板component的名字就是该vue文件名，使用时导入即可；</li>
<li>script标签：默认导出；</li>
<li>style标签：scoped属性相当于private，确保其中的样式只在本style样式中有效；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/063.png" alt="image-20200904130511003"></p>
<a id="more"></a>


<h3 id="1-2-App-vue和main-js"><a href="#1-2-App-vue和main-js" class="headerlink" title="1.2 App.vue和main.js"></a>1.2 App.vue和main.js</h3><ul>
<li>创建新项目时src目录下模板文件只需要保留App.vue和main.js即可；</li>
<li>App.vue中template模板相当于主模板，其中可以直接通过组件标签调用其它组件模板，相当于没有slot便签的限定而可以自由嵌套插槽；</li>
<li>App.vue组件用来传递给main.js，main.js是webpack中设置的默认入口文件，它只需要绑定App.vue文件并且完成一些组件的初始化和申明使用即可；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/066.png" alt="image-20200904131915497"></p>
<h2 id="2-webpack"><a href="#2-webpack" class="headerlink" title="2.webpack"></a>2.webpack</h2><h3 id="2-1-基础概念"><a href="#2-1-基础概念" class="headerlink" title="2.1 基础概念"></a>2.1 基础概念</h3><ul>
<li>webpack的本质是将新版本的vue组件框架打包成ES5版本支持的js代码；</li>
</ul>
<h3 id="2-2-实例步骤"><a href="#2-2-实例步骤" class="headerlink" title="2.2 实例步骤"></a>2.2 实例步骤</h3><ul>
<li>新建项目<code>webpack-study</code>；</li>
<li>打开之后创建<code>modules</code>文件目录；</li>
<li>在<code>modules</code>文件目录下创建<code>hello.js</code>作为模板，代码为：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴露一个方法，在同一个文件中暴露的多个方法最终被接受到同一个对象中</span></span><br><span class="line"><span class="built_in">exports</span>.sayHi = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;Vue webpack&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.sayHi2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;JavaScript&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.sayHi3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;JavaSE&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exports</span>.sayHi4 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;&lt;h1&gt;Linux&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>modules</code>文件目录下创建<code>main.js</code>作为入口，代码为：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接受一个文件中暴露的所有方法，类似于java的类</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">&quot;./hello&quot;</span>);</span><br><span class="line">hello.sayHi();</span><br><span class="line">hello.sayHi2();</span><br><span class="line">hello.sayHi3();</span><br><span class="line">hello.sayHi4();</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>webpack-study</code>目录下创建<code>webpack.config.js</code>文件用来设置webpack参数，代码为：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//entry设置程序入口</span></span><br><span class="line">    entry:<span class="string">&#x27;./modules/main.js&#x27;</span>,</span><br><span class="line">    <span class="comment">//output设置程序打包输出目录</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        filename:<span class="string">&quot;./js/bundle.js&quot;</span> <span class="comment">//这是标准格式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>在管理员模式下进入文件目录，使用指令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/059.png" alt="image-20200903172445440"></p>
<ul>
<li>这个<code>bundle.js</code>文件就是打包后得到的js文件，也就是最终拿来使用的文件；</li>
<li>最后如上图创建<code>index.html</code>文件，作为整个程序的首页，添加<code>&lt;script&gt;</code>标签引入<code>bundle.js</code>文件：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/js/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/060.png" alt="image-20200903172940366"></p>
<blockquote>
<p>大功告成！整个过程一目了然。</p>
</blockquote>
<hr>
<h2 id="3-vue-router（重点）"><a href="#3-vue-router（重点）" class="headerlink" title="3.vue-router（重点）"></a>3.vue-router（重点）</h2><h3 id="3-1-基础概念"><a href="#3-1-基础概念" class="headerlink" title="3.1 基础概念"></a>3.1 基础概念</h3><ul>
<li><p>实现多个页面跳转的功能；</p>
</li>
<li><p>能够实现部分组件的页面改变而不影响其它组件部分；</p>
</li>
<li><p>实质并不会通过服务器后端实现链接跳转，而是前端直接修改并且即时刷新显示</p>
</li>
</ul>
<h3 id="3-2-实例步骤"><a href="#3-2-实例步骤" class="headerlink" title="3.2 实例步骤"></a>3.2 实例步骤</h3><ul>
<li><p>在<code>components</code>目录下新建两个文件<code>main.vue</code>和<code>content.vue</code>；</p>
</li>
<li><p>如图所示，只在<code>template</code>标签内加入一段标题即可：</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/063.png" alt="image-20200904123949339"></p>
<ul>
<li>在<code>src</code>目录下新建目录<code>router</code>，下建<code>index.js</code>文件，代码如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//导入vue和vue-router组件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//导入新建的content.vue和main.vue组件</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">&quot;../components/content&quot;</span></span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&quot;../components/main&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//安装路由，相当于类的实例化操作</span></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置导出路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径，在App.vue中用于link to连接的部分</span></span><br><span class="line">      path:<span class="string">&#x27;/content&#x27;</span>,</span><br><span class="line">      <span class="comment">//路由名称，也可用于link to连接</span></span><br><span class="line">      name:<span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      component:Content</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//路由路径，在App.vue中用于link to连接的部分</span></span><br><span class="line">      path:<span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      <span class="comment">//路由名称，也可用于link to连接</span></span><br><span class="line">      name:<span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">      <span class="comment">//跳转的组件</span></span><br><span class="line">      component:Main</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>main.js</code>入口文件中导入<code>vue-router</code>：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">//自动扫描路由配置</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router, <span class="comment">//直接使用即可</span></span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>App.vue</code>文件中添加模板代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!--router只有两个标签，link为链接标签，view为显示视图标签，to属性即为转到路径，该路径是index.js中配置的路径--&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;main&quot;&gt;首页&lt;&#x2F;router-link&gt;</span><br><span class="line">    &lt;router-link to&#x3D;&quot;&#x2F;content&quot;&gt;内容页&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;!--没有view标签则无法显示内容--&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>部署服务器<code>npm run dev</code>后网页显示如图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/064.png"></p>
<ul>
<li>附：最终目录，其余部分已删除：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/065.png" alt="image-20200904125959596"></p>
<hr>
<h2 id="4-实例工程（运用element-UI）"><a href="#4-实例工程（运用element-UI）" class="headerlink" title="4.实例工程（运用element-UI）"></a>4.实例工程（运用element-UI）</h2><h3 id="4-1-新建项目并配置依赖"><a href="#4-1-新建项目并配置依赖" class="headerlink" title="4.1 新建项目并配置依赖"></a>4.1 新建项目并配置依赖</h3><ul>
<li><p>使用管理员模式运行命令行，并进入到目录下准备新建项目；</p>
</li>
<li><p>创建一个名为<code>hello-vue</code>的工程项目：<code>vue init webpack hello-vue</code>，接下来的步骤请参看博客：<a href="https://blog.csdn.net/weixin_44339531/article/details/108384498">Vue开发环境配置</a></p>
</li>
<li><p>新建之后，执行以下命令：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> he1lo-vue</span><br><span class="line"><span class="comment">#安装vue-router</span></span><br><span class="line">npm install vue-router --save- dev</span><br><span class="line"><span class="comment">#安装element- ui</span></span><br><span class="line">cnpm i element-ui -S</span><br><span class="line"><span class="comment">#安装依赖</span></span><br><span class="line">cnpm install</span><br><span class="line"><span class="comment">#安装SAsS加戟器</span></span><br><span class="line">cnpm install sass-loader node-sass --save-dev</span><br><span class="line"><span class="comment">#启动测试</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<ul>
<li>启动测试后可以正常通过端口访问即可；</li>
</ul>
<h3 id="4-2-修改配置文件"><a href="#4-2-修改配置文件" class="headerlink" title="4.2 修改配置文件"></a>4.2 修改配置文件</h3><ul>
<li>在IDEA中打开工程项目，并在<code>package.json</code>文件中修改以下内容（sass版本过高需手动调低）：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/067.png"></p>
<ul>
<li>修改完毕重新安装依赖：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure>



<h3 id="4-3-修改初始src"><a href="#4-3-修改初始src" class="headerlink" title="4.3 修改初始src"></a>4.3 修改初始src</h3><ul>
<li>按照<code>vue-router</code>删改，最终效果图如下：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/068.png" alt="image-20200904144820476"></p>
<h3 id="4-4-新建目录及文件"><a href="#4-4-新建目录及文件" class="headerlink" title="4.4 新建目录及文件"></a>4.4 新建目录及文件</h3><ul>
<li>新建项目目录router用来存放路由配置文件<code>index.js</code>；</li>
<li>新建项目目录view用来存放视图组件，而components组件专门存放功能组件，明确分工；</li>
<li>在view目录下新建<code>Login.vue</code>文件和<code>Main.vue</code>文件；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/069.png" alt="image-20200904145015407"></p>
<h3 id="4-5-使用element-ui组件"><a href="#4-5-使用element-ui组件" class="headerlink" title="4.5 使用element-ui组件"></a>4.5 使用element-ui组件</h3><ul>
<li><p>打开element组件：<a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a>；</p>
</li>
<li><p>如图，复制表单代码完全覆盖Login.vue文件（在el-form标签外添加template标签，否则无法运行），并对<code>Main.vue</code>文件添加简单文字“首页”：</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/070.png" alt="image-20200904145542362"></p>
<ul>
<li>所有视图组件都是独立的，接下来配置路由<code>index.js</code>文件，使其能够联系起来：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Main <span class="keyword">from</span> <span class="string">&#x27;../view/Main&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;../view/Login&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      component:Main</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      path:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component:Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h3 id="4-6-配置main-js文件"><a href="#4-6-配置main-js文件" class="headerlink" title="4.6 配置main.js文件"></a>4.6 配置main.js文件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(router);</span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>并在<code>App.vue</code>中添加路由显示；</li>
<li>最终成果：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/071.png" alt="image-20200904153130970"></p>
<hr>
<h2 id="5-路由嵌套"><a href="#5-路由嵌套" class="headerlink" title="5.路由嵌套"></a>5.路由嵌套</h2><h3 id="5-1-基础概念"><a href="#5-1-基础概念" class="headerlink" title="5.1 基础概念"></a>5.1 基础概念</h3><ul>
<li>路由嵌套可以实现外框架组件不变而仅改变内组件；</li>
</ul>
<h3 id="5-2-实例步骤"><a href="#5-2-实例步骤" class="headerlink" title="5.2 实例步骤"></a>5.2 实例步骤</h3><ul>
<li>接4工程；</li>
<li>在view目录下创建子目录user，并在该目录下创建两个新文件，新文件中仅配置一行文字：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/073.png" alt="image-20200904162145636"></p>
<ul>
<li>在路由<code>index.js</code>文件中添加子路由：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;</span><br><span class="line">      path:<span class="string">&#x27;/main&#x27;</span>,</span><br><span class="line">      component:Main,</span><br><span class="line">      children:[	</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/user/listone&#x27;</span>,<span class="attr">component</span>:UserListOne&#125;,</span><br><span class="line">        &#123;<span class="attr">path</span>:<span class="string">&#x27;/user/listtwo&#x27;</span>,<span class="attr">component</span>:UserListTwo&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      path:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      component:Login</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>对应更改<code>Main.vue</code>文件，导入侧边栏，并在侧边栏中添加路由连接和路由视图：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;el-radio-group v-model&#x3D;&quot;isCollapse&quot; style&#x3D;&quot;margin-bottom: 20px;&quot;&gt;</span><br><span class="line">    &lt;el-radio-button :label&#x3D;&quot;false&quot;&gt;展开&lt;&#x2F;el-radio-button&gt;</span><br><span class="line">    &lt;el-radio-button :label&#x3D;&quot;true&quot;&gt;收起&lt;&#x2F;el-radio-button&gt;</span><br><span class="line">  &lt;&#x2F;el-radio-group&gt;</span><br><span class="line">  &lt;el-menu default-active&#x3D;&quot;1-4-1&quot; class&#x3D;&quot;el-menu-vertical-demo&quot; @open&#x3D;&quot;handleOpen&quot; @close&#x3D;&quot;handleClose&quot; :collapse&#x3D;&quot;isCollapse&quot;&gt;</span><br><span class="line">    &lt;el-submenu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">      &lt;template slot&#x3D;&quot;title&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;span slot&#x3D;&quot;title&quot;&gt;个人中心&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;el-menu-item-group&gt;</span><br><span class="line">        &lt;span slot&#x3D;&quot;title&quot;&gt;分组一&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;!--添加路由链接--&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;&lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;listone&quot;&gt;账号设置&lt;&#x2F;router-link&gt;&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;&lt;router-link to&#x3D;&quot;&#x2F;user&#x2F;listtwo&quot;&gt;密码设置&lt;&#x2F;router-link&gt;&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-3&quot;&gt;选项3&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">      &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">      &lt;el-menu-item-group title&#x3D;&quot;分组2&quot;&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-4&quot;&gt;选项4&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">      &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">      &lt;el-submenu index&#x3D;&quot;1-4&quot;&gt;</span><br><span class="line">        &lt;span slot&#x3D;&quot;title&quot;&gt;选项5&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-4-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">      &lt;&#x2F;el-submenu&gt;</span><br><span class="line">    &lt;&#x2F;el-submenu&gt;</span><br><span class="line">    &lt;el-menu-item index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;el-icon-menu&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span slot&#x3D;&quot;title&quot;&gt;导航二&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">    &lt;el-menu-item index&#x3D;&quot;3&quot; disabled&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;el-icon-document&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span slot&#x3D;&quot;title&quot;&gt;导航三&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">    &lt;el-menu-item index&#x3D;&quot;4&quot;&gt;</span><br><span class="line">      &lt;i class&#x3D;&quot;el-icon-setting&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">      &lt;span slot&#x3D;&quot;title&quot;&gt;导航四&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;&#x2F;el-menu-item&gt;</span><br><span class="line">  &lt;&#x2F;el-menu&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--添加路由视图--&gt;</span><br><span class="line">  &lt;router-view align&#x3D;&quot;center&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      name: &quot;Main&quot;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          isCollapse: true</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        handleOpen(key, keyPath) &#123;</span><br><span class="line">          console.log(key, keyPath);</span><br><span class="line">        &#125;,</span><br><span class="line">        handleClose(key, keyPath) &#123;</span><br><span class="line">          console.log(key, keyPath);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .el-menu-vertical-demo:not(.el-menu--collapse) &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    min-height: 400px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果如图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/072.png" alt="image-20200904161758727"></p>
<hr>
<h2 id="6-传参以及重定向"><a href="#6-传参以及重定向" class="headerlink" title="6.传参以及重定向"></a>6.传参以及重定向</h2><h3 id="6-1-传参"><a href="#6-1-传参" class="headerlink" title="6.1 传参"></a>6.1 传参</h3><ul>
<li>先更改<code>Main.vue</code>文件中的路由器链接：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--name属性对应路由配置时的名称，params表示传参，且需要使用v-bind:双向绑定才能使此处的值能被路由接收--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;UserListOne&#x27;,params:&#123;id:1&#125;&#125;&quot;</span>&gt;</span>账号设置<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>再修改路由配置文件<code>index.js</code>：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// /:id 表示参数id，用来接收params传参，props:true，表示开启props传参</span></span><br><span class="line">&#123;<span class="attr">path</span>:<span class="string">&#x27;/user/listone/:id&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;UserListOne&#x27;</span>,<span class="attr">component</span>:UserListOne,<span class="attr">props</span>:<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>最后修改<code>ListOne.vue</code>文件：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;账号设置&lt;&#x2F;h1&gt;</span><br><span class="line">    &#123;&#123;id&#125;&#125;&lt;!--便可以直接调用参数，且内容必须直接放在标签内不，或者报错--&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props:[&#39;id&#39;],&#x2F;&#x2F;将index.js中的id传到此处</span><br><span class="line">        name: &quot;UserListOne&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>最后显示：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/074.png" alt="image-20200904173718333"></p>
<h3 id="6-2-重定向"><a href="#6-2-重定向" class="headerlink" title="6.2 重定向"></a>6.2 重定向</h3><ul>
<li>只要在路由配置时添加一个新的路由配置重定向即可：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path:<span class="string">&#x27;/goHome&#x27;</span>,</span><br><span class="line">  redirect:<span class="string">&#x27;/main&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>再在<code>Main.vue</code>中添加配置：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/goHome&quot;</span>&gt;</span>回到首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>得到结果：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/075.png" alt="image-20200904174020000"></p>
<h3 id="6-3-账号传参"><a href="#6-3-账号传参" class="headerlink" title="6.3 账号传参"></a>6.3 账号传参</h3><ul>
<li>先修改<code>Login.vue</code>文件，在跳转函数时添加代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&quot;/main/&quot;</span>+<span class="built_in">this</span>.ruleForm.name);</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>index.js</code>文件中修改代码接收参数：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">path:<span class="string">&#x27;/main/:name&#x27;</span>,</span><br><span class="line">component:Main,</span><br><span class="line">props:<span class="literal">true</span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>Main.vue</code>文件中添加代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">props:[<span class="string">&#x27;name&#x27;</span>],</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>结果：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/076.png" alt="image-20200904184745405"></p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/077.png" alt="image-20200904184818425"></p>
<h3 id="6-4-路由模式"><a href="#6-4-路由模式" class="headerlink" title="6.4 路由模式"></a>6.4 路由模式</h3><ul>
<li><p>mode属性：</p>
<ul>
<li>hash：路径带 # 符号；</li>
<li>history：路径不带 # 符号；</li>
</ul>
</li>
<li><p>修改为history模式：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mode:<span class="string">&#x27;history&#x27;</span>,</span><br></pre></td></tr></table></figure>

<ul>
<li>图显：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/078.png" alt="image-20200904185239423"></p>
<hr>
<h2 id="7-404及钩子"><a href="#7-404及钩子" class="headerlink" title="7. 404及钩子"></a>7. 404及钩子</h2><h3 id="7-1-404"><a href="#7-1-404" class="headerlink" title="7.1 404"></a>7.1 404</h3><ul>
<li>在view目录下新建<code>NotFound.vue</code>文件，添加文字即可；</li>
<li>在<code>index.js</code>文件中routes最后添加代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;*&#x27;</span>,	<span class="comment">//表示除以上页面外链接都指向该页面</span></span><br><span class="line">component:NotFound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>结果：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/079.png" alt="image-20200904194401030"></p>
<h3 id="7-2-路由钩子与异步请求"><a href="#7-2-路由钩子与异步请求" class="headerlink" title="7.2 路由钩子与异步请求"></a>7.2 路由钩子与异步请求</h3><ul>
<li>两个路由钩子：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//beforeRouteEnter(to,from,next):在进入路由前执行</span></span><br><span class="line"><span class="comment">//beforeRouteLeave(to,from,next):在离开路由前执行</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>参数说明：</p>
<ul>
<li>to：路由将要跳转的路径信息；</li>
<li>from：路由跳转前的路径信息；</li>
<li>next：路由的参数控制：<ul>
<li>next()：跳入下一个页面；</li>
<li>next(‘/path’)：改变路由的跳转方向，使其跳转到另一个路由；</li>
<li>next(false)：返回原来的页面；</li>
<li>next((vm)=&gt;{})，仅在<code>beforeRouteEnter</code>中可用，vm是组件实例；</li>
</ul>
</li>
</ul>
</li>
<li><p>在钩子函数中使用异步请求：</p>
<ul>
<li>安装Axios： <code>cnpm install axios -s</code> （反复尝试npm和cnpm，直到成功安装）；</li>
<li><code>main.js</code>引用Axios：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueAxios <span class="keyword">from</span> <span class="string">&#x27;vue-axios&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios,axios);</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>static</code>（静态数据，可以从网上读取并下载）目录下创建新目录<code>mock</code>（静态数据测试规范目录），新目录下创建新文件<code>data.json</code>（从Vue基础入门那里拿来使用），重新部署服务器之后能够通过文件目录读取到该文件（该步骤同样可测试axios是否完整安装，否则重装）；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/080.png" alt="image-20200904205141348"></p>
<ul>
<li>在<code>ListOne.vue</code>文件中添加以下代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;<span class="comment">//=&gt;是function的简写模式，在钩子函数中使用</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;进入路由之前&quot;</span>);</span><br><span class="line">        next(<span class="function"><span class="params">vm</span>=&gt;</span>&#123;<span class="comment">//使用此方法可以直接调用vm实例</span></span><br><span class="line">          vm.getData();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeRouteLeave:<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;<span class="comment">//=&gt;是function的简写模式，在钩子函数中使用</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;离开路由之前&quot;</span>);</span><br><span class="line">        next();</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        getData:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.axios(&#123;</span><br><span class="line">            method:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">            url:<span class="string">&#x27;http://localhost:8080/static/mock/data.json&#x27;</span> <span class="comment">//数据链接</span></span><br><span class="line">          &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(response);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>点击页面上“账号设置”之后则获取了该数据：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/081.png" alt="image-20200904210337482"></p>
<ul>
<li>并且正常输出了“进入路由之前”和“离开路由之前”提示；</li>
</ul>
</li>
<li><p>根据上述这段操作则可以实现从静态数据中获取数据，再结合前面几点内容融会贯通之后基本实现了前端的数据交互操作；</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2020/09/06/javascript%EF%BC%88%E5%90%ABjQuery%EF%BC%89/</url>
    <content><![CDATA[<h2 id="1-引入script"><a href="#1-引入script" class="headerlink" title="1.引入script"></a>1.引入script</h2><ul>
<li>内部写入；</li>
<li>外部引入；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--1.在html页面内部写入js代码    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--script标签内，写js代码    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;script&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--        alert(&#x27;hello,world&#x27;);--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;/script&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--2.外部导入    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认type=&quot;text/javascript&quot; 可以不用写出     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/helloworld.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>



<a id="more"></a>



<hr>
<h2 id="2-基本语法入门"><a href="#2-基本语法入门" class="headerlink" title="2.基本语法入门"></a>2.基本语法入门</h2><ul>
<li>定义变量 var 变量名 = 变量值;    只有var一种变量类型；</li>
<li>条件控制同java；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.定义变量 var 变量名 = 变量值;    只有var一种变量类型</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> score = <span class="number">75</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.条件控制同java</span></span></span><br><span class="line">        if(score&gt;=60&amp;&amp;score&lt;70)&#123;</span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;60-70&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">70</span>&amp;&amp;score&lt;<span class="number">80</span>)&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;70-80&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(score&gt;=<span class="number">80</span>&amp;&amp;score&lt;<span class="number">90</span>)&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;80-80&quot;</span>);</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">&quot;other&quot;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(score);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//console.log(score); 在浏览器控制台打印变量，相当于sout;</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用浏览器：<ul>
<li>Elements：html+css代码区域；</li>
<li>Console：控制台，可以在此处写入js执行代码；</li>
<li>Source：js源代码区域，可以断点debug，在此处debug代码；</li>
<li>Network：网络元素；</li>
<li>Application：应用；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/018.png"></p>
<hr>
<h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3.数据类型"></a>3.数据类型</h2><ul>
<li>数值、文本、图形、音频、视频……</li>
</ul>
<h3 id="3-1变量"><a href="#3-1变量" class="headerlink" title="3.1变量"></a>3.1变量</h3><ul>
<li>以字母、$、_ 等符号开头，可以使用中文定义，大小写敏感；</li>
<li>定义变量类型只有var一种类型；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 王者荣耀 = <span class="string">&quot;倔强青铜&quot;</span>;</span><br></pre></td></tr></table></figure>



<h3 id="3-2number"><a href="#3-2number" class="headerlink" title="3.2number"></a>3.2number</h3><ul>
<li>js不区分小数和整数；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span>			<span class="comment">//整数123</span></span><br><span class="line"><span class="number">123.1</span>		<span class="comment">//浮点数123.1</span></span><br><span class="line"><span class="number">1.123e3</span>		<span class="comment">//科学计数法1123</span></span><br><span class="line"><span class="number">-99</span>			<span class="comment">//负数-99</span></span><br><span class="line"><span class="literal">NaN</span>			<span class="comment">//Not a Number</span></span><br><span class="line"><span class="literal">Infinity</span>	<span class="comment">//无穷大</span></span><br></pre></td></tr></table></figure>



<h3 id="3-3字符串"><a href="#3-3字符串" class="headerlink" title="3.3字符串"></a>3.3字符串</h3><ul>
<li><p>正常字符串表示形式：</p>
<ul>
<li>‘abc’；</li>
<li>“abc”；</li>
</ul>
</li>
<li><p>转义字符：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">\<span class="string">&#x27;</span></span><br><span class="line"><span class="string">\n</span></span><br><span class="line"><span class="string">\t</span></span><br><span class="line"><span class="string">\u		//\u#### Unicode字符</span></span><br><span class="line"><span class="string">\x		//Ascll字符</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>多行字符串：</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Esc下键``</span></span><br><span class="line"><span class="keyword">var</span> msg =</span><br><span class="line">    <span class="string">`hello</span></span><br><span class="line"><span class="string">	world`</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>模板字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;zhaoxiaoan&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模板：$&#123;&#125;</span></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`hello,<span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(msg);</span><br><span class="line"><span class="comment">//&gt;hello,zhaoxiaoan</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串长度：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.length;</span><br></pre></td></tr></table></figure>
</li>
<li><p>大小写转换：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注意，此处是方法而不是属性</span></span><br><span class="line">str.toUpperCase();</span><br><span class="line">str.toLpwerCase();</span><br></pre></td></tr></table></figure>
</li>
<li><p>该字符在字符串中第一次出现的位置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">str.indexOf(<span class="string">&#x27;t&#x27;</span>);<span class="comment">//获得下标索引</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>substring：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[)</span><br><span class="line">str.substring(<span class="number">1</span>);		<span class="comment">//从第一个字符直到最后一个字符</span></span><br><span class="line">str.substring(<span class="number">1</span>,<span class="number">3</span>);		<span class="comment">//[1,3)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串数组操作（不可变性）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/019.png" alt="image-20200826134313146"></p>
</li>
</ul>
<h3 id="3-4布尔值"><a href="#3-4布尔值" class="headerlink" title="3.4布尔值"></a>3.4布尔值</h3><ul>
<li>true；</li>
<li>false；</li>
<li>判断输出时显示；</li>
</ul>
<h3 id="3-5逻辑运算符"><a href="#3-5逻辑运算符" class="headerlink" title="3.5逻辑运算符"></a>3.5逻辑运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp;	<span class="comment">//与</span></span><br><span class="line">    </span><br><span class="line">||	<span class="comment">//或</span></span><br><span class="line">    </span><br><span class="line">!	<span class="comment">//非</span></span><br></pre></td></tr></table></figure>



<h3 id="3-6比较运算符"><a href="#3-6比较运算符" class="headerlink" title="3.6比较运算符"></a>3.6比较运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">=		<span class="comment">//赋值符号</span></span><br><span class="line">==		<span class="comment">//等于（类型不一样，值一样，也会判断为true，如1==“1”得到true）</span></span><br><span class="line">===		<span class="comment">//绝对等于（类型一样，纸一样，才为true），所以一般使用===比较而不使用==</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>NaN===NaN，false，NaN与所有的数值都不相等，包括自己；</p>
</li>
<li><p>使用isNaN()判断变量是否为NaN；</p>
</li>
<li><p>浮点数问题：</p>
<ul>
<li><pre><code class="javascript">console.log((1/3)===(1-2/3);    //false
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 浮点数存在精度问题；</span><br><span class="line"></span><br><span class="line">- 常使用以下方式解决：</span><br><span class="line"></span><br><span class="line">- ```javascript</span><br><span class="line">  Math.abs((<span class="number">1</span>/<span class="number">3</span>)-(<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>)&lt;<span class="number">0.000000001</span>);</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="3-7null和undefined"><a href="#3-7null和undefined" class="headerlink" title="3.7null和undefined"></a>3.7null和undefined</h3><ul>
<li>null：空；</li>
<li>undefined：未定义；</li>
</ul>
<h3 id="3-8数组"><a href="#3-8数组" class="headerlink" title="3.8数组"></a>3.8数组</h3><ul>
<li>java的数组中必须为相同类型，js不是；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;abs&quot;</span>,<span class="literal">null</span>,<span class="literal">true</span>];<span class="comment">//常用此方式定义数组类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;abs&quot;</span>,<span class="literal">null</span>,<span class="literal">true</span>);<span class="comment">//不常用</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>取数组下标，如果越界，会显示undefined而不会执行更多的安全性检查；</p>
</li>
<li><p>多维数组：</p>
<ul>
<li><pre><code class="javascript">arr = [[1,2,3],[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]]
&gt;(2) [Array(3), Array(3)]
arr[1][1]
&gt;&quot;b&quot;
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 常用的方法和属性：</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    var arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//1.length</span></span><br><span class="line">    arr.length</span><br><span class="line">    &gt;<span class="number">6</span></span><br><span class="line">    <span class="comment">//给arr.length赋值时，长度增大则显示undefined，长度减小则从后往前删减元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.indexOf</span></span><br><span class="line">    arr.indexOf(<span class="number">2</span>)</span><br><span class="line">    &gt;<span class="number">1</span></span><br><span class="line">    <span class="comment">//字符索引，对所给元素判断最先出现位置下标，注意：1和&#x27;1&#x27;不同，索引也不同</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.slice()</span></span><br><span class="line">    arr.slice(<span class="number">3</span>)</span><br><span class="line">    &gt;(<span class="number">3</span>) [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">    <span class="comment">//截取array的一部分，返回一个新数组，类似于String中的substring()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4.push()、pop()</span></span><br><span class="line">    arr.push(&#x27;a&#x27;,&#x27;b&#x27;)</span><br><span class="line">    &gt;<span class="number">8</span></span><br><span class="line">    arr</span><br><span class="line">    &gt;(<span class="number">8</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line">    arr.pop()</span><br><span class="line">    &gt;<span class="string">&quot;b&quot;</span></span><br><span class="line">    arr</span><br><span class="line">    &gt;(<span class="number">7</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">    <span class="comment">//在原数组的尾部插入或取出元素，push可以同时处理多个元素，而pop每次只能取出一个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//5.unshift()、shift()</span></span><br><span class="line">    arr.unshift(&#x27;a&#x27;)</span><br><span class="line">    &gt;<span class="number">8</span></span><br><span class="line">    arr</span><br><span class="line">    &gt;(<span class="number">8</span>) [<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">    arr.shift()</span><br><span class="line">    &gt;<span class="string">&quot;a&quot;</span></span><br><span class="line">    arr</span><br><span class="line">    &gt;(<span class="number">7</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">&quot;a&quot;</span>]</span><br><span class="line">    <span class="comment">//从数组头部插入或取出元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6.sort()</span></span><br><span class="line">    arr = [&#x27;B&#x27;,&#x27;b&#x27;,&#x27;C&#x27;]</span><br><span class="line">    &gt;(<span class="number">3</span>) [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;C&quot;</span>]</span><br><span class="line">    arr.sort()</span><br><span class="line">    &gt;(<span class="number">3</span>) [<span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line">    <span class="comment">//将数组按照Ascll码值进行顺序排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//7.reverse()</span></span><br><span class="line">    arr.reverse()</span><br><span class="line">    &gt;(<span class="number">3</span>) [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>]</span><br><span class="line">    <span class="comment">//将数组元素反转</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//8.concat()</span></span><br><span class="line">    arr.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,])</span><br><span class="line">    &gt;(<span class="number">6</span>) [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    arr</span><br><span class="line">    &gt;(<span class="number">3</span>) [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>]</span><br><span class="line">    <span class="comment">//拼接数组，并且返回一个新数组而不是在原数组上修改</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//9.join()</span></span><br><span class="line">    arr.join(&#x27;-&#x27;)</span><br><span class="line">    &gt;<span class="string">&quot;b-C-B&quot;</span></span><br><span class="line">    arr</span><br><span class="line">    &gt;(<span class="number">3</span>) [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;B&quot;</span>]</span><br><span class="line">    <span class="comment">//添加连接符号并且输出新的数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//10.splice(index,x,&quot;&quot;,&quot;&quot;,...),index表示下标索引，x表示删除数组个数，&quot;&quot;可以自行添加元素</span></span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="3-9对象"><a href="#3-9对象" class="headerlink" title="3.9对象"></a>3.9对象</h3><ul>
<li>所有键都是字符串，尤其是在判断中要加上引号；</li>
<li>对象使用大括号，相当于匿名内部类；</li>
<li>使用键值对定义赋值，属性之间使用 <strong>”,“</strong> 隔开最后一个属性不需要添加；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name:<span class="string">&quot;zhaoxiaoan&quot;</span>,</span><br><span class="line">    age:<span class="number">3</span>,</span><br><span class="line">    tags:[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;web&#x27;</span>,<span class="string">&#x27;...&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>取变量值：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">person.name</span><br><span class="line">&gt;zhaoxiaoan</span><br></pre></td></tr></table></figure>

<ul>
<li>使用一个不存在的属性，不会报错，而是undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.haha</span><br><span class="line">&gt;<span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>常用的方法和属性：</p>
<ul>
<li><pre><code class="javascript">//1.delete
delete person.name
&gt;true
person
&gt;&#123;age: 3, tags: Array(4)&#125;
//动态地删减对象的属性

//2.增加
person.haha = &#39;haha&#39;
&gt;&quot;haha&quot;
person
&gt;&#123;age: 3, tags: Array(4), haha: &quot;haha&quot;&#125;
//动态地增加属性直接赋值即可

//3.判断属性值是否在对象中
&#39;age&#39; in person
&gt;true
&#39;toString&#39; in person
&gt;true
//有继承性质，&#39;toString&#39;是继承属性

//4.hasOwnProperty()
person.hasOwnProperty(&#39;age&#39;)
&gt;true
person.hasOwnProperty(&#39;toString&#39;)
&gt;false
//判断是否为自身定义属性

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.10.流程控制</span><br><span class="line"></span><br><span class="line">- if、while、for普通使用同Java；</span><br><span class="line"></span><br><span class="line">- 常用用法：</span><br><span class="line"></span><br><span class="line">  ```javascript</span><br><span class="line">  //shift+tab对齐</span><br><span class="line">  //1.forEach循环</span><br><span class="line">  var age = [1,2,3,6,4,5,8,21,3,5];</span><br><span class="line">  age.forEach(function (value) &#123;</span><br><span class="line">      console.log(value);</span><br><span class="line">  &#125;)</span><br><span class="line">  &gt;1</span><br><span class="line">  &gt;2</span><br><span class="line">  &gt;3</span><br><span class="line">  &gt;6</span><br><span class="line">  &gt;4</span><br><span class="line">  &gt;5</span><br><span class="line">  &gt;8</span><br><span class="line">  &gt;21</span><br><span class="line">  &gt;3</span><br><span class="line">  &gt;5</span><br><span class="line">  </span><br><span class="line">  //2.for in 循环</span><br><span class="line">  for (var num in age)&#123;</span><br><span class="line">      console.log(age[num]);</span><br><span class="line">  &#125;</span><br><span class="line">  &gt;1</span><br><span class="line">  &gt;2</span><br><span class="line">  &gt;3</span><br><span class="line">  &gt;6</span><br><span class="line">  &gt;4</span><br><span class="line">  &gt;5</span><br><span class="line">  &gt;8</span><br><span class="line">  &gt;21</span><br><span class="line">  &gt;3</span><br><span class="line">  &gt;5</span><br><span class="line">  //适用于未知数组长度，用于得到数组索引</span><br><span class="line">  </span><br><span class="line">  //3.for of 循环</span><br></pre></td></tr></table></figure>


</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="3-11-Map、Set"><a href="#3-11-Map、Set" class="headerlink" title="3.11.Map、Set"></a>3.11.Map、Set</h3><ul>
<li>Map</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;Tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">90</span>],[<span class="string">&#x27;hash&#x27;</span>,<span class="number">80</span>]]);	<span class="comment">//键值对数组</span></span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line">map.set(<span class="string">&#x27;admin&#x27;</span>,<span class="number">60</span>);	<span class="comment">//添加和修改</span></span><br><span class="line">map.delete(<span class="string">&#x27;Tom&#x27;</span>);		<span class="comment">//删除</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="number">100</span></span><br><span class="line">map</span><br><span class="line">&gt;<span class="built_in">Map</span>(<span class="number">3</span>) &#123;<span class="string">&quot;jack&quot;</span> =&gt; <span class="number">90</span>, <span class="string">&quot;hash&quot;</span> =&gt; <span class="number">80</span>, <span class="string">&quot;admin&quot;</span> =&gt; <span class="number">60</span>&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>Set</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>]);     <span class="comment">//去重数组</span></span><br><span class="line">set.add(<span class="number">100</span>);   <span class="comment">//添加</span></span><br><span class="line">set.delete(<span class="number">2</span>);  <span class="comment">//删除</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">3</span>));    <span class="comment">//判断是否存在该元素</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="literal">true</span></span><br><span class="line">set</span><br><span class="line">&gt;<span class="built_in">Set</span>(<span class="number">4</span>) &#123;<span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>遍历</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.数组遍历元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&gt;<span class="number">3</span></span><br><span class="line">&gt;<span class="number">4</span></span><br><span class="line">&gt;<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.Map遍历元素</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">&#x27;Tom&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;jack&#x27;</span>,<span class="number">90</span>],[<span class="string">&#x27;hash&#x27;</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&gt;(<span class="number">2</span>) [<span class="string">&quot;Tom&quot;</span>, <span class="number">100</span>]</span><br><span class="line">&gt;(<span class="number">2</span>) [<span class="string">&quot;jack&quot;</span>, <span class="number">90</span>]</span><br><span class="line">&gt;(<span class="number">2</span>) [<span class="string">&quot;hash&quot;</span>, <span class="number">80</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.Set遍历元素</span></span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>]);     </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> set)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&gt;<span class="number">3</span></span><br><span class="line">&gt;<span class="number">6</span></span><br><span class="line">&gt;<span class="number">2</span></span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：for in只有数组可用，Map，Set皆不可用，且只能遍历索引</span></span><br><span class="line"><span class="comment">//bug:</span></span><br><span class="line">arr.name = <span class="string">&#x27;zhaoxiaoan&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&gt;<span class="number">0</span></span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line">&gt;<span class="number">2</span></span><br><span class="line">&gt;name</span><br><span class="line"><span class="comment">//此时索引号会变成键名，且不能输出name相对应的值zhaoxiaoan</span></span><br></pre></td></tr></table></figure>



<h3 id="3-12-严格检查模式"><a href="#3-12-严格检查模式" class="headerlink" title="3.12.严格检查模式"></a>3.12.严格检查模式</h3><ul>
<li>是为了防止多个js文件中全局变量互相矛盾的问题，在每个js文件或<code>&lt;script&gt;</code>标签中都使用；</li>
<li>在js代码第一行写入代码 <strong><em>‘use strict’;</em></strong> ，表明使用严格检查模式；</li>
<li>定义变量时都定义为局部变量，建议使用<strong>let</strong>标识符而不使用<strong>var</strong>；</li>
</ul>
<hr>
<h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><h3 id="4-1定义函数"><a href="#4-1定义函数" class="headerlink" title="4.1定义函数"></a>4.1定义函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绝对值函数</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//两种定义方式效果相同，常用一</span></span><br><span class="line">abs(<span class="number">10</span>)</span><br><span class="line">&gt;<span class="number">10</span></span><br><span class="line">abs(<span class="number">-10</span>)</span><br><span class="line">&gt;<span class="number">10</span></span><br><span class="line">abs()</span><br><span class="line">&gt;<span class="literal">NaN</span></span><br><span class="line"><span class="comment">//注意，未传入参数则undefined</span></span><br></pre></td></tr></table></figure>



<h3 id="4-2参数"><a href="#4-2参数" class="headerlink" title="4.2参数"></a>4.2参数</h3><ul>
<li>函数可以传入任意个参数，即使未定义</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//手动抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x!== <span class="string">&#x27;number&#x27;</span>)&#123;<span class="comment">//x的数据类型不为&#x27;number&#x27;，不传入参数时x未定义，会抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;Not a Number&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abs()</span><br><span class="line">&gt;Uncaught Not a <span class="built_in">Number</span></span><br></pre></td></tr></table></figure>

<ul>
<li>arguments：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abs</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;x=&#x27;</span>+x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">of</span> <span class="built_in">arguments</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abs(<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">555</span>,<span class="number">5</span>)</span><br><span class="line">&gt;x=<span class="number">1</span></span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line">&gt;<span class="number">3</span></span><br><span class="line">&gt;<span class="number">6</span></span><br><span class="line">&gt;<span class="number">2</span></span><br><span class="line">&gt;<span class="number">555</span></span><br><span class="line">&gt;<span class="number">5</span></span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line"><span class="comment">//arguments用于接收所有传入参数</span></span><br></pre></td></tr></table></figure>

<ul>
<li>rest：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">a,b,...rest</span>) </span>&#123;<span class="comment">//...rest只能放在参数列最后一个，用于接收多余的参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;a=&#x27;</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;b=&#x27;</span>+b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">63</span>,<span class="number">9</span>,<span class="number">52</span>,<span class="number">85</span>,<span class="number">666</span>,<span class="number">555</span>,<span class="number">985</span>)</span><br><span class="line">&gt;a=<span class="number">1</span></span><br><span class="line">&gt;b=<span class="number">5</span></span><br><span class="line">&gt;(<span class="number">8</span>) [<span class="number">2</span>, <span class="number">63</span>, <span class="number">9</span>, <span class="number">52</span>, <span class="number">85</span>, <span class="number">666</span>, <span class="number">555</span>, <span class="number">985</span>]</span><br></pre></td></tr></table></figure>



<h3 id="4-3变量的作用域"><a href="#4-3变量的作用域" class="headerlink" title="4.3变量的作用域"></a>4.3变量的作用域</h3><ul>
<li><p>var 关键字具有作用范围：</p>
<ul>
<li>在一个函数内部定义的变量名，只能往下延伸，不能在该函数外使用；</li>
<li>在函数内部的函数中，定义一个与父函数相同的变量，调用时优先调用自身变量；</li>
<li>ES6之前，var变量存在一定Bug：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="comment">//结果如下，i值在函数f1()外依然可以调用</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/021.png" alt="image-20200827150554681"></p>
<ul>
<li>由此引入 let 关键字解决局部作用域冲突问题：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br><span class="line"><span class="comment">//let定义变量只在作用域内部有效，外部调用报错：ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/022.png" alt="image-20200827150804774"></p>
</li>
<li><p>作用域内部所有变量定义，无论位置，在 js 编译时都自动将定义提前，但并不会赋值初始化：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&#x27;x&#x27;</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(y);</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">f2();</span><br><span class="line"></span><br><span class="line"><span class="comment">//未定义 let y = &#x27;y&#x27;; 时:ReferenceError: y is not defined</span></span><br><span class="line"><span class="comment">//定义 let y = &#x27;y&#x27;; 后:ReferenceError: Cannot access &#x27;y&#x27; before initialization</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//规范写法：将所有变量定义提前到作用域开头</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>&lt;script&gt;</code>中直接定义的全局变量（包括对象和函数），以及直接从库中调用的类似于alert()函数，实质上全部属于window全局对象：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">alert(x);</span><br><span class="line">alert(<span class="built_in">window</span>.x);</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="built_in">window</span>.x);</span><br><span class="line"><span class="comment">//三条语句实质上等价</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> old_alert = <span class="built_in">window</span>.alert();</span><br><span class="line"><span class="built_in">window</span>.alert() = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="comment">//给window.alert()赋予了新的函数，导致原函数失效</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">123</span>);<span class="comment">//失效了无法显示弹窗</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复window.alert()</span></span><br><span class="line"><span class="built_in">window</span>.alert = old_alert;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">456</span>);<span class="comment">//可以显示该弹窗</span></span><br></pre></td></tr></table></figure>

<ul>
<li>因为window全局对象的危险性，为确保在多个js文件中代码保持安全性，规范法则，自己单独创建一个对象用于存放自己的变量，相当于每个人都拥有一个属于自己的window对象，而不会被其它人无意篡改：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建唯一全局对象</span></span><br><span class="line"><span class="keyword">var</span> ZhaoApp = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义属于自己的全局变量</span></span><br><span class="line">ZhaoApp.name = <span class="string">&#x27;zhaoxiaoan&#x27;</span>;</span><br><span class="line">ZhaoApp.add = <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ES6引入常量 const 关键字，只读：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">&#x27;3.14&#x27;</span>;</span><br><span class="line">PI = <span class="string">&#x27;314&#x27;</span>;<span class="comment">//该语句会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在引入const之前都使用大写字母表示常量，但依然由var定义，值可改变</span></span><br></pre></td></tr></table></figure>



<h3 id="4-4方法"><a href="#4-4方法" class="headerlink" title="4.4方法"></a>4.4方法</h3><ul>
<li>定义方法：对象内部定义的函数叫做方法；<ul>
<li>其中this的用法和java相似，但更丰富，它默认指向调用该函数或者该方法的对象，如方式二中外部调用函数也是可行的，然而直接调用getAge()函数时却得到NaN，本质是此时调用函数对象是window本身，而window对象并不存在.name属性；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">var</span> zhaoxiaoan = &#123;</span><br><span class="line">    name:<span class="string">&#x27;朝小闇&#x27;</span>,</span><br><span class="line">    birth:<span class="number">2000</span>,</span><br><span class="line">    age:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> nowYear = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> (nowYear-<span class="built_in">this</span>.birth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象内部只存在属性和方法两种内容</span></span><br><span class="line"><span class="comment">//调用方法需要()</span></span><br><span class="line">zhaoxiaoan.age()</span><br><span class="line">&gt;<span class="number">20</span></span><br><span class="line"><span class="comment">//调用属性则不用()</span></span><br><span class="line">zhaoxiaoan.name</span><br><span class="line">&gt;<span class="string">&quot;朝小闇&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nowYear = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> (nowYear-<span class="built_in">this</span>.birth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zhaoxiaoan = &#123;</span><br><span class="line">    name : <span class="string">&#x27;朝小闇&#x27;</span>,</span><br><span class="line">    birth : <span class="number">2000</span>,</span><br><span class="line">    age : getAge</span><br><span class="line">&#125;</span><br><span class="line">zhaoxiaoan.age()</span><br><span class="line">&gt;<span class="number">20</span></span><br><span class="line">zhaoxiaoan.name</span><br><span class="line">&gt;<span class="string">&quot;朝小闇&quot;</span></span><br><span class="line">getAge()</span><br><span class="line">&gt;<span class="literal">NaN</span></span><br></pre></td></tr></table></figure>

<ul>
<li>apply()方法：所有函数共有，它的作用是将this默认指向改为指定指向对象：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nowYear = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> (nowYear-<span class="built_in">this</span>.birth);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zhaoxiaoan = &#123;</span><br><span class="line">    name : <span class="string">&#x27;朝小闇&#x27;</span>,</span><br><span class="line">    birth : <span class="number">2000</span>,</span><br><span class="line">    age : getAge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中第一个参数为指向对象名，第二个为传入该函数的参数列表，用数组表示</span></span><br><span class="line">getAge.apply(zhaoxiaoan,[])</span><br><span class="line">&gt;<span class="number">20</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="5-内部对象"><a href="#5-内部对象" class="headerlink" title="5.内部对象"></a>5.内部对象</h2><h3 id="5-1-标准对象类型"><a href="#5-1-标准对象类型" class="headerlink" title="5.1 标准对象类型"></a>5.1 标准对象类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span></span><br><span class="line">&gt;<span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&gt;<span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span></span><br><span class="line">&gt;<span class="string">&quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>		<span class="comment">//NaN 虽然含义为Not a Number,但却是number类型</span></span><br><span class="line">&gt;<span class="string">&quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> []		</span><br><span class="line">&gt;<span class="string">&quot;object&quot;</span>		<span class="comment">//对象类型</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line">&gt;<span class="string">&quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.abs</span><br><span class="line">&gt;<span class="string">&quot;function&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span></span><br><span class="line">&gt;<span class="string">&quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-2-Date"><a href="#5-2-Date" class="headerlink" title="5.2 Date"></a>5.2 Date</h3><ul>
<li>常用时间方法：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nowDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">nowDate.getFullYear();	<span class="comment">//年</span></span><br><span class="line">&gt;<span class="number">2020</span></span><br><span class="line">nowDate.getMonth();		<span class="comment">//月，注意，设计月份为0-11，得到7实质是8月</span></span><br><span class="line">&gt;<span class="number">7</span></span><br><span class="line">nowDate.getDate();		<span class="comment">//日</span></span><br><span class="line">&gt;<span class="number">27</span>	</span><br><span class="line">nowDate.getDay();		<span class="comment">//星期</span></span><br><span class="line">&gt;<span class="number">4</span></span><br><span class="line">nowDate.getHours();		<span class="comment">//时</span></span><br><span class="line">&gt;<span class="number">18</span></span><br><span class="line">nowDate.getMinutes();	<span class="comment">//分</span></span><br><span class="line">&gt;<span class="number">52</span></span><br><span class="line">nowDate.getSeconds();	<span class="comment">//秒</span></span><br><span class="line">&gt;<span class="number">43</span></span><br><span class="line">nowDate.getTime();		<span class="comment">//时间戳，以1970-1-1 00:00:00为始计算毫秒数</span></span><br><span class="line">&gt;<span class="number">1598525563925</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>时间转化：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1598525563925</span>))	<span class="comment">//时间戳转化成具体标准时间</span></span><br><span class="line">&gt;Thu Aug <span class="number">27</span> <span class="number">2020</span> <span class="number">18</span>:<span class="number">52</span>:<span class="number">43</span> GMT+<span class="number">0800</span> (中国标准时间)<span class="comment">//GMT中国标准时间</span></span><br><span class="line"></span><br><span class="line">nowDate.toLocaleString();		<span class="comment">//转化为当地时间</span></span><br><span class="line">&gt;<span class="string">&quot;2020/8/27 下午6:52:43&quot;</span></span><br><span class="line"></span><br><span class="line">nowDate.toGMTString();</span><br><span class="line">&gt;<span class="string">&quot;Thu, 27 Aug 2020 10:52:43 GMT&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="5-3-JSON"><a href="#5-3-JSON" class="headerlink" title="5.3 JSON"></a>5.3 JSON</h3><ul>
<li><p>定义：</p>
<ul>
<li>JSON是一种轻量级的交换格式；</li>
<li>具有简洁和清晰的<strong>层次结构</strong>；</li>
<li>能够有效提升网络传输效率；</li>
</ul>
</li>
<li><p>在 javascript 中一切都皆对象，任何 js 支持的类型都能用 JSON 来表示；</p>
</li>
<li><p>格式：</p>
<ul>
<li>对象 {}</li>
<li>数组 []</li>
<li>键值对 key : value </li>
</ul>
</li>
<li><p>对象与JSON格式相互转换：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name : <span class="string">&#x27;zhaoxiaoan&#x27;</span>,</span><br><span class="line">    age : <span class="number">3</span>,</span><br><span class="line">    sex : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//JSON.stringify()将对象转换为JSON格式</span></span><br><span class="line"><span class="keyword">let</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line">jsonUser</span><br><span class="line">&gt;<span class="string">&#x27;&#123;&quot;name&quot;:&quot;zhaoxiaoan&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span></span><br><span class="line"><span class="comment">// 得到字符串 注意，外部用&#x27;&#x27;,内部用&quot;&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JSON.parse()将JSON格式转换为对象</span></span><br><span class="line"><span class="keyword">let</span> parseUser = <span class="built_in">JSON</span>.parse(<span class="string">&#x27;&#123;&quot;name&quot;:&quot;zhaoxiaoan&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span>);</span><br><span class="line">parseUser</span><br><span class="line">&gt;&#123;<span class="attr">name</span>: <span class="string">&quot;zhaoxiaoan&quot;</span>, <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 得到对象，可展开</span></span><br></pre></td></tr></table></figure>

<ul>
<li>对象与JSON区别</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象格式</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;zhaoxiaoan&quot;</span>, <span class="attr">age</span>: <span class="number">3</span>, <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span>&#125;;</span><br><span class="line"><span class="comment">//json本质是字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;zhaoxiaoan&quot;,&quot;age&quot;:3,&quot;sex&quot;:&quot;男&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="6-面向对象编程"><a href="#6-面向对象编程" class="headerlink" title="6.面向对象编程"></a>6.面向对象编程</h2><ul>
<li>基础概念：javascript、java、C#等编程语言都是面向对象的；</li>
<li>面向对象编程：<ul>
<li>类：模板</li>
<li>对象：具体实例</li>
</ul>
</li>
</ul>
<p><a href="https://blog.csdn.net/weixin_44339531/article/details/104204377">java一切都是对象博客链接</a></p>
<h3 id="6-1-原型继承"><a href="#6-1-原型继承" class="headerlink" title="6.1 原型继承"></a>6.1 原型继承</h3><ul>
<li>原型的特性就在于可以随时修改；</li>
<li>一个对象定义之后指向自己本身的原型，对象和对象原型并不是一个同一样事物；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = &#123;</span><br><span class="line">    name : <span class="string">&#x27;zhaoxiaoan&#x27;</span>,</span><br><span class="line">    age : <span class="number">3</span>,</span><br><span class="line">    run : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;is running&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">    name : <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小明的原型指向Student，相当于父类</span></span><br><span class="line">xiaoming.__proto__ = Student;</span><br><span class="line"></span><br><span class="line">xiaoming</span><br><span class="line">&gt;&#123;<span class="attr">name</span>: <span class="string">&quot;xiaoming&quot;</span>&#125;</span><br><span class="line">&gt;name: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&gt;__proto__:</span><br><span class="line">&gt;age: <span class="number">3</span></span><br><span class="line">&gt;name: <span class="string">&quot;zhaoxiaoan&quot;</span></span><br><span class="line">&gt;run: ƒ ()</span><br><span class="line">&gt;__proto__: <span class="built_in">Object</span></span><br><span class="line"></span><br><span class="line">xiaoming.run()</span><br><span class="line">&gt;xiaomingis running</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中 __proto__ 原型指向Student，属性和方法直接继承原型，但是相同属性name依然默认调用自身name属性，而Student的原型则为Object对象(window全局对象最终原型同样指向Object对象)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Bird = &#123;</span><br><span class="line">    fly : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot;is flying&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xiaoming.__proto__ = Bird;</span><br><span class="line"><span class="comment">//可以随时修改指向原型，修改后:</span></span><br><span class="line">xiaoming.run()</span><br><span class="line">&gt;<span class="built_in">TypeError</span>: xiaoming.run is not a <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="function"><span class="title">xiaoming</span>.<span class="title">fly</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">&gt;<span class="title">xiaomingis</span> <span class="title">flying</span></span></span><br><span class="line"><span class="function"><span class="title">xiaoming</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;name: <span class="string">&quot;xiaoming&quot;</span>&#125;</span><br><span class="line">&gt;name: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&gt;__proto__:</span><br><span class="line">&gt;fly: ƒ ()</span><br><span class="line">&gt;__proto__: <span class="built_in">Object</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Student新增一个方法</span></span><br><span class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//prototype 是指对Student原型添加一个方法，而Student对象指向自身的原型</span></span><br></pre></td></tr></table></figure>



<h3 id="6-2-class继承"><a href="#6-2-class继承" class="headerlink" title="6.2 class继承"></a>6.2 class继承</h3><ul>
<li>ES6之后出现的新的继承方式；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="comment">//constructor就是构造方法</span></span><br><span class="line">    <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类中定义的方法不需要使用function，类中只存在属性和方法</span></span><br><span class="line">    hello()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,grade) &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);<span class="comment">//重写构造方法必须涉及父类原型构造方法中的属性</span></span><br><span class="line">        <span class="built_in">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    myGrade()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我今年的年级是：&quot;</span>+<span class="built_in">this</span>.grade+<span class="string">&quot;年级&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> Student(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> XiaoStudent(<span class="string">&quot;xiaohong&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//class继承的本质还是原型继承</span></span><br><span class="line">xiaoming</span><br><span class="line">&gt;Student &#123;<span class="attr">name</span>: <span class="string">&quot;xiaoming&quot;</span>&#125;</span><br><span class="line">&gt;name: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">&gt;__proto__: <span class="built_in">Object</span>		<span class="comment">//原型依然指向于Object</span></span><br><span class="line">xiaoming.hello()</span><br><span class="line">&gt;hello</span><br><span class="line"></span><br><span class="line">xiaohong</span><br><span class="line">&gt;XiaoStudent &#123;<span class="attr">name</span>: <span class="string">&quot;xiaohong&quot;</span>, <span class="attr">grade</span>: <span class="number">2</span>&#125;</span><br><span class="line">&gt;grade: <span class="number">2</span></span><br><span class="line">&gt;name: <span class="string">&quot;xiaohong&quot;</span></span><br><span class="line">&gt;__proto__: Student		<span class="comment">//继承自Student</span></span><br><span class="line">&gt;<span class="keyword">constructor</span>: class XiaoStudent</span><br><span class="line">&gt;myGrade: ƒ myGrade()</span><br><span class="line">&gt;__proto__: Object</span><br><span class="line">xiaohong.myGrade()</span><br><span class="line">&gt;我今年的年级是：2年级</span><br></pre></td></tr></table></figure>



<h3 id="6-3-原型链"><a href="#6-3-原型链" class="headerlink" title="6.3 原型链"></a>6.3 原型链</h3><ul>
<li>原型指向最终直到Object截止，再往后就是Object和Object原型互指；</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/023.png" alt="image-20200827214732956"></p>
<hr>
<h2 id="7-操作BOM对象（重点）"><a href="#7-操作BOM对象（重点）" class="headerlink" title="7.操作BOM对象（重点）"></a>7.操作BOM对象（重点）</h2><h3 id="7-1-BOM"><a href="#7-1-BOM" class="headerlink" title="7.1 BOM"></a>7.1 BOM</h3><ul>
<li>是浏览器对象模型；</li>
<li>常用浏览器内核：<ul>
<li>IE</li>
<li>Chrome</li>
<li>Safari</li>
<li>FireFox</li>
</ul>
</li>
<li>第三方浏览器：<ul>
<li>QQ浏览器</li>
<li>360浏览器</li>
<li>……</li>
</ul>
</li>
</ul>
<h3 id="7-2-浏览器常用对象属性方法"><a href="#7-2-浏览器常用对象属性方法" class="headerlink" title="7.2 浏览器常用对象属性方法"></a>7.2 浏览器常用对象属性方法</h3><ul>
<li><p>window：</p>
<ul>
<li>代表浏览器窗口；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)		<span class="comment">//弹窗</span></span><br><span class="line">&gt;<span class="literal">undefined</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight	<span class="comment">//浏览器内部显示部分大小</span></span><br><span class="line">&gt;<span class="number">582</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth</span><br><span class="line">&gt;<span class="number">150</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight	<span class="comment">//浏览器全部大小</span></span><br><span class="line">&gt;<span class="number">701</span></span><br><span class="line"><span class="built_in">window</span>.outerWidth</span><br><span class="line">&gt;<span class="number">712</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>navigator：</p>
<ul>
<li>封装了浏览器的信息，也可以通过<strong>window.navigator</strong>调用；</li>
<li>大多数时候不使用navigator属性（不建议使用），因为会被认为修改；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.navigator.appName</span><br><span class="line">&gt;<span class="string">&quot;Netscape&quot;</span></span><br><span class="line">navigator.appVersion</span><br><span class="line">&gt;<span class="string">&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&quot;</span></span><br><span class="line">navigator.userAgent</span><br><span class="line">&gt;<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36&quot;</span></span><br><span class="line">navigator.platform</span><br><span class="line">&gt;<span class="string">&quot;Win32&quot;</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>screen：</p>
<ul>
<li>代表电脑屏幕尺寸；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line"><span class="number">1536</span></span><br><span class="line">screen.height</span><br><span class="line"><span class="number">864</span></span><br><span class="line"><span class="comment">//上述屏宽有125%的显示屏放大，设置回100%后即为以下</span></span><br><span class="line">screen.width</span><br><span class="line"><span class="number">1920</span></span><br><span class="line">screen.height</span><br><span class="line"><span class="number">1080</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>location（重点）：</strong></p>
<ul>
<li>代表当前网页的URL信息；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以 https://www.baidu.com 为例</span></span><br><span class="line">location</span><br><span class="line"></span><br><span class="line">&gt;host: <span class="string">&quot;www.baidu.com&quot;</span>			<span class="comment">//网页主机</span></span><br><span class="line">&gt;href: <span class="string">&quot;https://www.baidu.com/&quot;</span>	<span class="comment">//网页链接</span></span><br><span class="line">&gt;protocol: <span class="string">&quot;https:&quot;</span>				<span class="comment">//网络协议</span></span><br><span class="line"></span><br><span class="line">location.reload()				<span class="comment">//重载页面，即刷新页面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//很牛逼的方法</span></span><br><span class="line"><span class="comment">//设置新的地址，访问此网页则自动打开新地址</span></span><br><span class="line">location.assign(<span class="string">&#x27;https://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>document：</strong></p>
<ul>
<li>代表当前的页面，HTML、DOM文档树；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.title</span><br><span class="line">&gt;<span class="string">&quot;百度一下，你就知道&quot;</span></span><br><span class="line"><span class="comment">//网页标题，可娱乐修改</span></span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">&#x27;zhaoxiaoan&#x27;</span></span><br><span class="line">&gt;<span class="string">&quot;zhaoxiaoan&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>获取具体的文档树节点</strong>：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">dl:</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/024.png" alt="image-20200827225540957"></p>
<ul>
<li><strong>获取网页cookie：</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以 https://www.baidu.com 为例</span></span><br><span class="line"><span class="built_in">document</span>.cookie</span><br><span class="line">&gt;<span class="string">&quot;BIDUPSID=D82CB30D89EEDA3F955B622F870B5FE0; PSTM=1582882414; BAIDUID=B04A05793CE4AE9F77A02ECD55450F04:FG=1; BD_UPN=12314753; sugstore=0; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; delPer=0; BD_CK_SAM=1; PSINO=6; BD_HOME=1; H_PS_645EC=5d9esAXtgUE7WN%2F8FMHnWe2t10nBl8dCBY4JYI0tWWyKYGKF5r5VvZyY6d4; H_PS_PSSID=32653_32606_1452_32045_32675_32116_32090_32618_32506_22159&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>劫持cookie原理：</strong><ul>
<li>不要访问浏览器报警网页；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--未知js文件，恶意人员获取你的cookie上传到他自己的服务器--&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>history：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.back()		<span class="comment">//网页后退</span></span><br><span class="line">history.forward()	<span class="comment">//网页前进</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<hr>
<h2 id="8-操作DOM节点（重点）"><a href="#8-操作DOM节点（重点）" class="headerlink" title="8.操作DOM节点（重点）"></a>8.操作DOM节点（重点）</h2><h3 id="8-1-基本说明"><a href="#8-1-基本说明" class="headerlink" title="8.1 基本说明"></a>8.1 基本说明</h3><ul>
<li>浏览器网页就是一个DOM树形结构；<ul>
<li>更新：更新DOM节点；</li>
<li>遍历：遍历DOM节点，得到DOM节点；</li>
<li>删除：删除一个DOM节点；</li>
<li>添加：添加一个DOM节点；</li>
</ul>
</li>
<li>DOM树形结构：<ul>
<li>每一个标签都是一个DOM节点；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/025.png" alt="image-20200828115725992"></p>
<h3 id="8-2-获得DOM节点"><a href="#8-2-获得DOM节点" class="headerlink" title="8.2 获得DOM节点"></a>8.2 获得DOM节点</h3><ul>
<li>这是原生代码，之后一般都使用JQuery；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>这是p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>这是p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//对应css选择器</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> h1 = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;p2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> father = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;father&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> childrens = father.children;    <span class="comment">//获取father节点的所有子节点</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// father.children[0] 以数组下标的方式取得子节点</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// father.firstChild;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// father.lastChild;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="8-3-更新DOM节点"><a href="#8-3-更新DOM节点" class="headerlink" title="8.3 更新DOM节点"></a>8.3 更新DOM节点</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;id1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> id1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;id1&#x27;</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>操作文本：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.innerText = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">&gt;<span class="string">&quot;123&quot;</span></span><br><span class="line">id1.innerHTML = <span class="string">&#x27;&lt;p&gt;111111111111111&lt;/p&gt;&#x27;</span></span><br><span class="line">&gt;<span class="string">&quot;&lt;p&gt;111111111111111&lt;/p&gt;&quot;</span>  </span><br></pre></td></tr></table></figure>

<ul>
<li>操作CSS：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.style.color = <span class="string">&#x27;yellow&#x27;</span>		<span class="comment">//属性使用，要使用字符串</span></span><br><span class="line">&gt;<span class="string">&quot;yellow&quot;</span></span><br><span class="line">id1.style.fontSize = <span class="string">&#x27;40px&#x27;</span>		<span class="comment">// _ 转 驼峰命名规则</span></span><br><span class="line">&gt;<span class="string">&quot;40px&quot;</span></span><br><span class="line">id1.style.padding = <span class="string">&#x27;40px&#x27;</span></span><br><span class="line">&gt;<span class="string">&quot;40px&quot;</span></span><br></pre></td></tr></table></figure>



<h3 id="8-4-删除DOM节点"><a href="#8-4-删除DOM节点" class="headerlink" title="8.4 删除DOM节点"></a>8.4 删除DOM节点</h3><ul>
<li>删除子节点前必须获得父节点，自己不能删除自己；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>这是p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>这是p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//删除节点步骤：1.先通过该节点获得父节点；2.再由父节点删除该节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> self = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;p1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> parent = self.parentElement;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//删除方式一：</span></span></span><br><span class="line">    parent.removeChild(self);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//删除节点过程中children时刻在变化，是一个动态的过程</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//删除方式二：</span></span></span><br><span class="line"><span class="javascript">    parent.removeChild(parent.children[<span class="number">0</span>]);     <span class="comment">//删除一次之后，后续子节点会自动往前补充</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="8-5-插入DOM节点（重点）"><a href="#8-5-插入DOM节点（重点）" class="headerlink" title="8.5 ==插入DOM节点（重点）=="></a>8.5 ==插入DOM节点（重点）==</h3><ul>
<li>前面学过的 innerHTML 属性会覆盖目标DOM下所有的标签；</li>
<li>append：<ul>
<li>通过append甚至可以插入<code>&lt;head&gt;</code>、<code>&lt;body&gt;</code>、<code>&lt;style&gt;</code>等标签，实现所有HTML、CSS功能；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;js&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;se&quot;</span>&gt;</span>JavaSE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;ee&quot;</span>&gt;</span>JavaEE<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;me&quot;</span>&gt;</span>JavaME<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//1.将已有的节点追加到目标节点尾端</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">	<span class="comment">//1.1 获得节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//1.2 直接追加到节点末尾</span></span></span><br><span class="line">    list.appendChild(js);</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//2.创建新的节点，并追加到节点末尾</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.1创建一个新的节点</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> newP = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);<span class="comment">//创建一个p标签</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//2.2给新创建的节点赋值</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//方式一：</span></span></span><br><span class="line"><span class="javascript">    newP.id = <span class="string">&#x27;newP&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    newP.innerText = <span class="string">&#x27;123&#x27;</span>;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//方式二：（更常用）</span></span></span><br><span class="line"><span class="javascript">    newP.setAttribute(<span class="string">&#x27;id&#x27;</span>,<span class="string">&#x27;newP&#x27;</span>);		<span class="comment">//参数就是键值对格式</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//2.3将新创建的标签追加到目标节点</span></span></span><br><span class="line">    list.appendChild(newP);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//3.添加style标签尝试修改css属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> myStyle = <span class="built_in">document</span>.createElement(<span class="string">&#x27;style&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    myStyle.setAttribute(<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;text/css&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    myStyle.innerHTML = <span class="string">&#x27;body&#123;background-color: chartreuse&#125;&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>].appendChild(myStyle);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//注意，标签名字后面可以跟数组以确保是该标签</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>insertBefore：<ul>
<li>将新节点插入到目标节点的前面；</li>
<li>要被目标节点包含的节点调用（自身调用无效）；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;list&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> ee = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;ee&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> js = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//要包含的节点.insertBefore(newNode,targetNode)</span></span></span><br><span class="line">    list.insertBefore(js,ee);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="9-操作表单（验证）"><a href="#9-操作表单（验证）" class="headerlink" title="9.操作表单（验证）"></a>9.操作表单（验证）</h2><h3 id="9-1-表单简介"><a href="#9-1-表单简介" class="headerlink" title="9.1 表单简介"></a>9.1 表单简介</h3><ul>
<li>是一个DOM树；</li>
<li>具有如下属性：<ul>
<li>文本框：text</li>
<li>下拉框：<code>&lt;select&gt;</code></li>
<li>单选框：radio</li>
<li>多选框：checkbox</li>
<li>隐藏域：hidden</li>
<li>密码框：password</li>
<li>……</li>
</ul>
</li>
</ul>
<h3 id="9-2-获得要提交的信息"><a href="#9-2-获得要提交的信息" class="headerlink" title="9.2 获得要提交的信息"></a>9.2 获得要提交的信息</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    单选框的value属性就是其设置好的value值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;man&quot;</span> <span class="attr">id</span>=<span class="string">&quot;boy&quot;</span>&gt;</span> 男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;women&quot;</span> <span class="attr">id</span>=<span class="string">&quot;girl&quot;</span>&gt;</span> 女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> input_text = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> boy_radio = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;boy&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> girl_radio = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;girl&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">//得到输入框的值</span></span></span><br><span class="line">    input_text.value;</span><br><span class="line"><span class="javascript">    &gt;<span class="string">&quot;123322553&quot;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//修改输入框的值</span></span></span><br><span class="line"><span class="javascript">    input_text.value = <span class="string">&#x27;123&#x27;</span></span></span><br><span class="line"><span class="javascript">	&gt;<span class="string">&quot;123&quot;</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//得到单选框是否被选中</span></span></span><br><span class="line">    girl_radio.checked;</span><br><span class="line"><span class="javascript">    &gt;<span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//修改其是否被选中</span></span></span><br><span class="line"><span class="javascript">    girl_radio.checked = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    &gt;<span class="literal">true</span></span></span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="comment">//单选框和复选框的value值只是设定好的value属性</span></span></span><br><span class="line">    girl_radio.value</span><br><span class="line"><span class="javascript">	&gt;<span class="string">&quot;women&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="9-3-提交表单"><a href="#9-3-提交表单" class="headerlink" title="9.3 提交表单"></a>9.3 提交表单</h3><ul>
<li><p>使用md5算法加密，同时使用隐藏域防止密码框修改：</p>
<ul>
<li><pre><code class="html">&lt;!--md5加密算法引入，可以自己下载到本地，下载地址在引入地址的上级--&gt;
&lt;script src=&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;&gt;&lt;/script&gt;
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        添加name属性才可在提交时被看见--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密  码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--隐藏域用来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;md5-password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;f()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> uname = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pwd = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;password&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> md5pwd = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;md5-password&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(md5pwd.value);<span class="comment">//隐藏域的值自己设置，可以为空，此处为空下面没有输出</span></span></span><br><span class="line">        &gt;</span><br><span class="line"><span class="javascript">		md5pwd.value = md5(pwd.value); <span class="comment">//md5算法，直接以密码域值作参，修改原密码</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(md5pwd.value);<span class="comment">//经过md5算法之后可以改密</span></span></span><br><span class="line">        &gt;ae6e334f62fb5d989398deed87568c94</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre>
</li>
</ul>
</li>
<li><p>name属性的作用：</p>
<ul>
<li>没有name属性则无法看到表单提交的内容；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/026.png" alt="image-20200828175252659"></p>
<ul>
<li>onsubmit：<ul>
<li>onsubmit=”return f()” 固定格式，将函数返回值返回给表单，如果函数返回false，则不会跳转页面不会提交；</li>
<li>注意一下<code>&lt;button&gt;</code>标签中<code>type</code>属性的变化；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">onsubmit</span>=<span class="string">&quot;return f()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>密  码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">id</span>=<span class="string">&quot;md5-password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;f()&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> uname = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> pwd = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;password&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> md5pwd = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;md5-password&#x27;</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(md5pwd.value);<span class="comment">//隐藏域的值自己设置，可以为空</span></span></span><br><span class="line">        md5pwd.value = md5(pwd.value);</span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(md5pwd.value);<span class="comment">//经过md5算法之后可以改密</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<hr>
<h2 id="10-jQuery"><a href="#10-jQuery" class="headerlink" title="10.jQuery"></a>10.jQuery</h2><ul>
<li><p>jQuery是一个库，里面存在大量javaScript函数；</p>
</li>
<li><p>推荐一个jQuery文档工具站：</p>
<ul>
<li><a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a></li>
</ul>
</li>
</ul>
<h3 id="10-1-获取jQuery"><a href="#10-1-获取jQuery" class="headerlink" title="10.1 获取jQuery"></a>10.1 获取jQuery</h3><ul>
<li>下载jQuery文件；</li>
<li>外部cdn引入（具体请参考博客）：<ul>
<li><a href="https://www.cnblogs.com/Leophen/p/11134844.html">https://www.cnblogs.com/Leophen/p/11134844.html</a></li>
</ul>
</li>
</ul>
<h3 id="10-2-初步使用jQuery"><a href="#10-2-初步使用jQuery" class="headerlink" title="10.2 初步使用jQuery"></a>10.2 初步使用jQuery</h3><ul>
<li>两种引入方式，对应两种获取方式：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    1.外部引入在线cdn--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    2.内部导入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;lib/jquery-3.5.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>jQuery使用：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    jQuery调用公式 $(selector).action()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">id</span>=<span class="string">&quot;test-jQuery&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// $ 符号代表jQuery对象，相当于前面所说的window对象，是一种自己创建的对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//此处selector选择器就是css中的选择器，有自动提示，后面的click()就是动作，而函数作为匿名参数传入动作内</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">&#x27;#test-jQuery&#x27;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;123&#x27;</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="10-3-jQuery选择器"><a href="#10-3-jQuery选择器" class="headerlink" title="10.3 jQuery选择器"></a>10.3 jQuery选择器</h3><ul>
<li><code>jQuery</code>选择器与原生<code>javaScript</code>选择器比较：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原生js，选择器少，麻烦不好记</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line"><span class="built_in">document</span>.getElementById();</span><br><span class="line"><span class="comment">//class</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName();</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery，css中的选择器都能用，多且简便</span></span><br><span class="line"><span class="comment">//标签</span></span><br><span class="line">$(<span class="string">&#x27;p&#x27;</span>).click();</span><br><span class="line"><span class="comment">//id</span></span><br><span class="line">$(<span class="string">&#x27;#id&#x27;</span>).click();</span><br><span class="line"><span class="comment">//class</span></span><br><span class="line">$(<span class="string">&#x27;.class&#x27;</span>).click();</span><br></pre></td></tr></table></figure>



<h3 id="10-4-jQuery事件"><a href="#10-4-jQuery事件" class="headerlink" title="10.4 jQuery事件"></a>10.4 jQuery事件</h3><ul>
<li><p>事件一般分为（细学自行去看前文文档网站）：</p>
<ul>
<li>鼠标事件</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/028.png" alt="image-20200828195411498"></p>
<ul>
<li>键盘事件</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/029.png" alt="image-20200828200054125"></p>
<ul>
<li>其它事件</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--3.事件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;mouseMove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divMove&quot;</span>&gt;</span></span><br><span class="line">在这里意动鼠标试试！</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//当网页元素加载完毕之后响应事件</span></span></span><br><span class="line">    /*$(document).ready(function (e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;)*/</span><br><span class="line"><span class="javascript">    <span class="comment">//上述是原始写法，简写为：</span></span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#divMove&#x27;</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;<span class="comment">//e即为得到的鼠标移动信息</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">&#x27;#mouseMove&#x27;</span>).text(<span class="string">&#x27;mouse:    x:&#x27;</span>+e.pageX+<span class="string">&#x27;y:&#x27;</span>+e.pageY)</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>结果：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/027.png" alt="image-20200828194948814"></p>
<h3 id="10-5-jQuery操作DOM"><a href="#10-5-jQuery操作DOM" class="headerlink" title="10.5 jQuery操作DOM"></a>10.5 jQuery操作DOM</h3><ul>
<li>节点文本操作：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[class=js]&#x27;</span>).text();				<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul li[class=js]&#x27;</span>).text(<span class="string">&#x27;123456&#x27;</span>);		<span class="comment">//修改值</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html();							<span class="comment">//获取值</span></span><br><span class="line">$(<span class="string">&#x27;#test-ul&#x27;</span>).html(<span class="string">&#x27;&lt;strong&gt;123&lt;/strong&gt;&#x27;</span>);		<span class="comment">//修改值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>css操作：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[class=js]&#x27;</span>).css(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;red&quot;</span>&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>元素的显示和隐藏：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;#test-ul li[class=js]&#x27;</span>).show();</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[class=js]&#x27;</span>).hide();</span><br><span class="line">$(<span class="string">&#x27;#test-ul li[class=js]&#x27;</span>).toggle();		<span class="comment">//显示和隐藏相互转换</span></span><br></pre></td></tr></table></figure>

<ul>
<li>娱乐：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).width();</span><br><span class="line">$(<span class="built_in">document</span>).width();</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ajax()</code>就是研究事件的； </li>
</ul>
<h3 id="10-6-复习小技巧"><a href="#10-6-复习小技巧" class="headerlink" title="10.6 复习小技巧"></a>10.6 复习小技巧</h3><ul>
<li>巩固js、jQuery：<ul>
<li>看jQuery源码；</li>
<li>看游戏源码（源码之家）；</li>
</ul>
</li>
<li>巩固HTML、CSS：<ul>
<li>扒网站，对应效果删源码直到最简，复制html框架，再下载相应css、js文件；</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
</search>
