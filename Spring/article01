<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.1.1">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/MuyunHui.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/MuyunHui.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/MuyunHui.png">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/animate.css@3.1.1/animate.min.css">
  <link rel="stylesheet" href="//cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css">
  <script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"></script>

<script class="hexo-configurations">
    var NexT = window.NexT || {};
    var CONFIG = {"hostname":"kunpw.cn","root":"/","scheme":"Gemini","version":"8.0.0","exturl":false,"sidebar":{"display":"always","padding":18,"offset":12},"copycode":true,"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":"valine","storage":true,"lazyload":false,"nav":null,"activeClass":"valine"},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"},"path":"search.xml","localsearch":{"enable":true,"trigger":"auto","top_n_per_article":1,"unescape":false,"preload":false}};
  </script>

  <meta name="description" content="Spring实战第五版英文版及源码资源链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;18N8tt62cE5H8yXCRh95Jcw  提取码：ko2n  1.注解原理探索及使用 @Repository、@Controller、@Service、@Component 四个包级注解，都实现了@Bean注解，即可以将标注类交托给springbean作为组件处理，除此之外：   @Reposito">
<meta property="og:type" content="article">
<meta property="og:title" content="Spring实战(一)——Spring基础（含Spring实战第五版源码和pdf）">
<meta property="og:url" content="http://kunpw.cn/Spring/article01">
<meta property="og:site_name" content="朝小闇的博客">
<meta property="og:description" content="Spring实战第五版英文版及源码资源链接：https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;18N8tt62cE5H8yXCRh95Jcw  提取码：ko2n  1.注解原理探索及使用 @Repository、@Controller、@Service、@Component 四个包级注解，都实现了@Bean注解，即可以将标注类交托给springbean作为组件处理，除此之外：   @Reposito">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/SpringBoot/Spring/0101.png">
<meta property="og:image" content="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/SpringBoot/Spring/0102.png">
<meta property="og:image" content="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/SpringBoot/Spring/0103.png">
<meta property="article:published_time" content="2021-04-08T14:17:38.505Z">
<meta property="article:modified_time" content="2021-05-31T12:24:14.657Z">
<meta property="article:author" content="Zhaoxiaoan">
<meta property="article:tag" content="java">
<meta property="article:tag" content="SpringBoot">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/SpringBoot/Spring/0101.png">


<link rel="canonical" href="http://kunpw.cn/Spring/article01">


<script data-pjax class="page-configurations">
  // https://hexo.io/docs/variables.html
  CONFIG.page = {
    sidebar: "",
    isHome : false,
    isPost : true,
    lang   : 'zh-CN'
  };
</script>

  <title>Spring实战(一)——Spring基础（含Spring实战第五版源码和pdf） | 朝小闇的博客</title>
  






  <noscript>
  <style>
  body { margin-top: 2rem; }

  .use-motion .menu-item,
  .use-motion .sidebar,
  .use-motion .post-block,
  .use-motion .pagination,
  .use-motion .comments,
  .use-motion .post-header,
  .use-motion .post-body,
  .use-motion .collection-header {
    visibility: visible;
  }

  .use-motion .header,
  .use-motion .site-brand-container .toggle,
  .use-motion .footer { opacity: initial; }

  .use-motion .site-title,
  .use-motion .site-subtitle,
  .use-motion .custom-logo-image {
    opacity: initial;
    top: initial;
  }

  .use-motion .logo-line {
    transform: scaleX(1);
  }

  .search-pop-overlay, .sidebar-nav { display: none; }
  .sidebar-panel { display: block; }
  </style>
</noscript>

  
	<script type="text/javascript" src="//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js"></script>
  

<link rel="alternate" href="/atom.xml" title="朝小闇的博客" type="application/atom+xml">
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <h1 class="site-title">朝小闇的博客</h1>
      <i class="logo-line"></i>
    </a>
      <p class="site-subtitle" itemprop="description">海上月是天上月，眼前人是心上人</p>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
        <i class="fa fa-search fa-fw fa-lg"></i>
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu">
        <li class="menu-item menu-item-home">

    <a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a>

  </li>
        <li class="menu-item menu-item-about">

    <a href="/about/" rel="section"><i class="fa fa-user fa-fw"></i>关于</a>

  </li>
        <li class="menu-item menu-item-tags">

    <a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签<span class="badge">34</span></a>

  </li>
        <li class="menu-item menu-item-categories">

    <a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类<span class="badge">7</span></a>

  </li>
        <li class="menu-item menu-item-archives">

    <a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档<span class="badge">29</span></a>

  </li>
        <li class="menu-item menu-item-essays">

    <a href="/essays" rel="section"><i class="fa fa-heart fa-fw"></i>随笔</a>

  </li>
      <li class="menu-item menu-item-search">
        <a role="button" class="popup-trigger"><i class="fa fa-search fa-fw"></i>搜索
        </a>
      </li>
  </ul>
</nav>



  <div class="search-pop-overlay">
    <div class="popup search-popup">
        <div class="search-header">
  <span class="search-icon">
    <i class="fa fa-search"></i>
  </span>
  <div class="search-input-container">
    <input autocomplete="off" autocapitalize="off" maxlength="80"
           placeholder="搜索..." spellcheck="false"
           type="search" class="search-input">
  </div>
  <span class="popup-btn-close">
    <i class="fa fa-times-circle"></i>
  </span>
</div>
<div class="search-result-container no-result">
  <div class="search-result-icon">
    <i class="fa fa-spinner fa-pulse fa-5x"></i>
  </div>
</div>

    </div>
  </div>

</div>
        
  
  <div class="toggle sidebar-toggle">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>

  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <!--noindex-->
      <section class="post-toc-wrap sidebar-panel">
          <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#1-%E6%B3%A8%E8%A7%A3%E5%8E%9F%E7%90%86%E6%8E%A2%E7%B4%A2%E5%8F%8A%E4%BD%BF%E7%94%A8"><span class="nav-text">1.注解原理探索及使用</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#2-Spring%E7%BB%93%E6%9E%84%E5%8E%9F%E7%90%86"><span class="nav-text">2.Spring结构原理</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#2-1-SpringBoot-DevTools%EF%BC%9A"><span class="nav-text">2.1 SpringBoot DevTools：</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#2-2-Controller%EF%BC%88%E6%8E%A7%E5%88%B6%E5%99%A8%E5%B1%82%EF%BC%89%EF%BC%9A"><span class="nav-text">2.2 Controller（控制器层）：</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#3-%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92"><span class="nav-text">3.数据交互</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#3-1-Spring-JdbcTemplate%EF%BC%9A"><span class="nav-text">3.1 Spring JdbcTemplate：</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#3-2-Spring-Data-JPA%EF%BC%9A"><span class="nav-text">3.2 Spring Data JPA：</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#4-SpringSecurity"><span class="nav-text">4.SpringSecurity</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#4-1-%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C"><span class="nav-text">4.1 用户注册</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-2-%E4%BF%9D%E6%8A%A4Web%E8%AF%B7%E6%B1%82"><span class="nav-text">4.2 保护Web请求</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#4-3-%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF"><span class="nav-text">4.3 获取登录用户信息</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#5-%E9%85%8D%E7%BD%AE"><span class="nav-text">5.配置</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#5-1-%E5%88%9B%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7"><span class="nav-text">5.1 创建自己的配置属性</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-2-%E4%BD%BF%E7%94%A8profile%E8%BF%9B%E8%A1%8C%E9%85%8D%E7%BD%AE"><span class="nav-text">5.2 使用profile进行配置</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#5-3-%E5%9C%A8%E4%B8%8D%E5%90%8Cprofile%E6%9D%A1%E4%BB%B6%E4%B8%8B%E6%9D%A1%E4%BB%B6%E5%8C%96%E5%88%9B%E5%BB%BAbean"><span class="nav-text">5.3 在不同profile条件下条件化创建bean</span></a></li></ol></li></ol></div>
      </section>
      <!--/noindex-->

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-author animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
    <img class="site-author-image" itemprop="image" alt="Zhaoxiaoan"
      src="/images/PubuLan.png">
  <p class="site-author-name" itemprop="name">Zhaoxiaoan</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">29</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
      <div class="site-state-item site-state-categories">
            <a href="/categories/">
          
        <span class="site-state-item-count">7</span>
        <span class="site-state-item-name">分类</span></a>
      </div>
      <div class="site-state-item site-state-tags">
            <a href="/tags/">
          
        <span class="site-state-item-count">34</span>
        <span class="site-state-item-name">标签</span></a>
      </div>


  </nav>
</div>
  <div class="links-of-author animated">
      <span class="links-of-author-item">
        <a href="https://github.com/ZHAOXIAOAN" title="GitHub → https:&#x2F;&#x2F;github.com&#x2F;ZHAOXIAOAN" rel="noopener external nofollow noreferrer" target="_blank"><i class="fab fa-github fa-fw"></i>GitHub</a>
      </span>
  </div>



    <div class="links-of-blogroll motion-element links-of-blogroll-block">
      <div class="links-of-blogroll-title">
        <!-- modify icon to fire by szw -->
        <i class="fa fa-history fa-" aria-hidden="true"></i>
        近期文章
      </div>
      <ul class="links-of-blogroll-list">
        
        
          <li>
            <a href="/Spring/article01" title="Spring实战(一)——Spring基础（含Spring实战第五版源码和pdf）" target="_blank">Spring实战(一)——Spring基础（含Spring实战第五版源码和pdf）</a>
          </li>
        
          <li>
            <a href="/2021/03/25/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%AC%AC%E4%B8%89%E7%AB%A0.%E5%88%86%E5%B8%83%E5%BC%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/" title="分布式系统设计学习笔记（二）分布式程序设计语言" target="_blank">分布式系统设计学习笔记（二）分布式程序设计语言</a>
          </li>
        
          <li>
            <a href="/2021/03/24/embeddedSystem/%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/" title="嵌入式系统笔记整理（一）" target="_blank">嵌入式系统笔记整理（一）</a>
          </li>
        
          <li>
            <a href="/2021/03/12/SpringBoot/SpringBoot%EF%BC%88%E4%BA%94%EF%BC%89%E2%80%94%E2%80%94SpringSecurity%E5%92%8CShiro/" title="SpringBoot(五)——SpringSecurity和Shiro" target="_blank">SpringBoot(五)——SpringSecurity和Shiro</a>
          </li>
        
          <li>
            <a href="/2021/03/10/SpringBoot/SpringBoot%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%EF%BC%88%E6%95%B4%E5%90%88Mybatis%EF%BC%89/" title="SpringBoot(四)——数据库连接（整合Mybatis）" target="_blank">SpringBoot(四)——数据库连接（整合Mybatis）</a>
          </li>
        
      </ul>
    </div>


      </section>
        <div class="back-to-top animated">
          <i class="fa fa-arrow-up"></i>
          <span>0%</span>
        </div><div>
  <canvas id="canvasDiyBlock" style="width:60%;">当前浏览器不支持canvas，请更换浏览器后再试</canvas><script src="/js/custom/clock.js"></script>
</div>


    </div>
  </aside>
  <div class="sidebar-dimmer"></div>


    </header>

    

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


    <div class="main-inner post posts-expand">
      

      

    
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="http://kunpw.cn/Spring/article01">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/PubuLan.png">
      <meta itemprop="name" content="Zhaoxiaoan">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="朝小闇的博客">
    </span>

    
    
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          Spring实战(一)——Spring基础（含Spring实战第五版源码和pdf）
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>

      <time title="创建时间：2021-04-08 22:17:38" itemprop="dateCreated datePublished" datetime="2021-04-08T22:17:38+08:00">2021-04-08</time>
    </span>
      <span class="post-meta-item">
        <span class="post-meta-item-icon">
          <i class="far fa-calendar-check"></i>
        </span>
        <span class="post-meta-item-text">更新于</span>
        <time title="修改时间：2021-05-31 20:24:14" itemprop="dateModified" datetime="2021-05-31T20:24:14+08:00">2021-05-31</time>
      </span>
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-folder"></i>
      </span>
      <span class="post-meta-item-text">分类于</span>
        <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
          <a href="/categories/Spring%E5%AE%9E%E6%88%98/" itemprop="url" rel="index"><span itemprop="name">Spring实战</span></a>
        </span>
    </span>

  
    <span class="post-meta-item" title="阅读次数" id="busuanzi_container_page_pv" style="display: none;">
      <span class="post-meta-item-icon">
        <i class="far fa-eye"></i>
      </span>
      <span class="post-meta-item-text">阅读次数：</span>
      <span id="busuanzi_value_page_pv"></span>
    </span>
  
  <span class="post-meta-item">
    
      <span class="post-meta-item-icon">
        <i class="far fa-comment"></i>
      </span>
      <span class="post-meta-item-text">Valine：</span>
    
    <a title="valine" href="/Spring/article01#valine-comments" itemprop="discussionUrl">
      <span class="post-comments-count valine-comment-count" data-xid="/Spring/article01" itemprop="commentCount"></span>
    </a>
  </span>
  
  
      </div>
      <div class="post-meta">
    <span class="post-meta-item" title="本文字数">
      <span class="post-meta-item-icon">
        <i class="far fa-file-word"></i>
      </span>
      <span class="post-meta-item-text">本文字数：</span>
      <span>17k</span>
    </span>
    <span class="post-meta-item" title="阅读时长">
      <span class="post-meta-item-icon">
        <i class="far fa-clock"></i>
      </span>
      <span class="post-meta-item-text">阅读时长 &asymp;</span>
      <span>15 分钟</span>
    </span>
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">
        <p>Spring实战第五版英文版及源码资源链接：<a target="_blank" rel="noopener external nofollow noreferrer" href="https://pan.baidu.com/s/18N8tt62cE5H8yXCRh95Jcw">https://pan.baidu.com/s/18N8tt62cE5H8yXCRh95Jcw</a>  提取码：ko2n </p>
<h2 id="1-注解原理探索及使用"><a href="#1-注解原理探索及使用" class="headerlink" title="1.注解原理探索及使用"></a>1.注解原理探索及使用</h2><blockquote>
<p>@Repository、@Controller、@Service、@Component 四个包级注解，都实现了@Bean注解，即可以将标注类交托给springbean作为组件处理，除此之外：</p>
</blockquote>
<ul>
<li>@Repository：<ul>
<li>数据访问层，一般是mapper或者dao层，将标注类中抛出的数据访问异常封装为Spring数据访问异常；</li>
</ul>
</li>
<li>@Controller：<ul>
<li>控制层，一般是controller层，标注控制器，实现action，能够填充可选的数据模型model并将请求传递给一个视图view；</li>
</ul>
</li>
<li>@Service：<ul>
<li>服务层（业务逻辑层），一般是service或者manager层，可以理解为对一个或多个DAO的再次封装；</li>
</ul>
</li>
<li>@Component：<ul>
<li>泛指各种组件，组件不属于以上三种时使用该注解；</li>
</ul>
</li>
</ul>
<p>（层次结构）：</p>
<ul>
<li>pojo：实体层，实体类；</li>
<li>repository/mapper/dao：数据访问层，接口类；</li>
<li>manager/service(serviceImpl)：服务层，接口类和实现类，一般可直接省略接口直接实现；</li>
<li>controller：控制层，实现路由跳转等基本控制；</li>
<li>config：配置层；</li>
</ul>
<a id="more"></a>



<p>注解学习请参看博客：<a target="_blank" rel="noopener external nofollow noreferrer" href="http://blog.kunpw.cn/2020/10/23/java/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/">http://blog.kunpw.cn/2020/10/23/java/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</a></p>
<ol>
<li><p><code>@Configuration</code>：<code>Configuration.java</code></p>
<ul>
<li>自定义一个Springbean组件；</li>
<li>指示一个类声明了一个或多个@Bean方法，并且可以由Spring容器进行处理，以在运行时为这些bean生成bean定义和服务请求；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions and service requests for those beans at runtime</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@Bean</code>：<code>Bean.java</code></p>
<ul>
<li>通常@Bean方法在@Configuration类中申明，此时bean方法通过直接调用该方法来引用同一类中其它@Bean方法，且@Configuration类及其下方法不能被定义为final或private；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Typically, @Bean methods are declared within @Configuration classes. In this case, bean methods may reference other @Bean methods in the same class by calling them directly. This ensures that references between beans are strongly typed and navigable. Such so-called &#x27;inter-bean references&#x27; are guaranteed to respect scoping and AOP semantics, just like getBean() lookups would. These are the semantics known from the original &#x27;Spring JavaConfig&#x27; project which require CGLIB subclassing of each such configuration class at runtime. As a consequence, @Configuration classes and their factory methods must not be marked as final or private in this mode. </span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@Controller</code>：<code>Controller.java</code></p>
<ul>
<li>表示带注释的类是“控制器”（例如Web控制器）。 此注释用作{@link Component @Component}的特化，允许通过类路径扫描自动检测实现类。它通常与基于{@link org.springframework.web.bind.annotation.RequestMapping}注释的带注释的处理程序方法结合使用；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Indicates that an annotated class is a &quot;Controller&quot; (e.g. a web controller). &lt;p&gt;This annotation serves as a specialization of &#123;@link Component @Component&#125;, allowing for implementation classes to be autodetected through classpath scanning. It is typically used in combination with annotated handler methods based on the &#123;@link org.springframework.web.bind.annotation.RequestMapping&#125; annotation.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@RestController</code>：<code>RestController.java</code></p>
<ul>
<li>由{@link Controller @Controller}和{@link ResponseBody @ResponseBody}进行注释，即实现两者功能；</li>
<li>相较于@Controller，由于@ResponseBody的作用，对于前端HTML视图页面，如果返回值为String类型，则不会跳转访问html资源，而是直接将字符串写到客户端；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A convenience annotation that is itself annotated with &#123;@link Controller @Controller&#125; and &#123;@link ResponseBody @ResponseBody&#125;.</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@ResponseBody</code>：<code>ResponseBody.java</code></p>
<ul>
<li>将方法的返回值，以特定的格式写入到response的body区域，进而将数据返回给客户端。当方法上面没有写ResponseBody,底层会将方法的返回值封装为ModelAndView对象。如果返回值是字符串，那么直接将字符串写到客户端；如果是一个对象，会将对象转化为json串，然后写到客户端；</li>
</ul>
</li>
<li><p><code>@RequestMapping</code>：<code>RequestMapping.java</code></p>
<ul>
<li><p>通用请求处理，一般用于类级别，其余五个具体请求处理一般用于通用处理下方法级别；</p>
</li>
<li><p>一般在控制器层，和<code>@Controller</code>同时使用；</p>
</li>
<li><p>一般一个控制器使用一个@RequestMapping注解路径，其余不同请求可以分发在相同父路径下；</p>
</li>
<li><table>
<thead>
<tr>
<th align="center">注解</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@RequestMapping</td>
<td align="center">通用请求处理</td>
</tr>
<tr>
<td align="center">@GetMapping</td>
<td align="center">处理HTTP GET请求</td>
</tr>
<tr>
<td align="center">@PostMapping</td>
<td align="center">处理HTTP Post请求</td>
</tr>
<tr>
<td align="center">@PutMapping</td>
<td align="center">处理HTTP Put请求</td>
</tr>
<tr>
<td align="center">@DeleteMapping</td>
<td align="center">处理HTTP Delete请求</td>
</tr>
<tr>
<td align="center">@PatchMapping</td>
<td align="center">处理HTTP Patch请求</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><code>@Data</code>：<code>Data.java</code></p>
<ul>
<li>属于lombok，等价于{@code @Getter @Setter @RequiredArgsConstructor @ToString @EqualsAndHashCode}，即实现了实体类的多种方法，也就是一个简单的方法封装；</li>
</ul>
</li>
<li><p><code>@Slf4j</code>：</p>
<ul>
<li>属于lombok，类级，在运行时，会在这个类中自动生成一个SLF4J(Simple Logging Facade For Java) Logger，生成日志；</li>
</ul>
</li>
<li><p><code>@Qualifier</code>：</p>
<ul>
<li>当一个接口有多个实现类的时候，用来指明具体调用哪一个实现类；</li>
</ul>
</li>
</ol>
<p>其余亟待补充……</p>
<hr>
<h2 id="2-Spring结构原理"><a href="#2-Spring结构原理" class="headerlink" title="2.Spring结构原理"></a>2.Spring结构原理</h2><p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/SpringBoot/Spring/0101.png" alt="image-20210318100228918"></p>
<p>Spring的核心是提供一个<strong>容器（container）</strong>，通常又称为<strong>Spring应用上下文（Spring application context）</strong>，该容器会创建和管理应用<strong>组件（bean）</strong>。</p>
<p><strong>依赖注入（dependency injection,DI）</strong>：将bean装配在一起，应用依赖于<strong>容器</strong>来创建和维护所有组件，并将其注入到需要它们的bean中，而bean不需要再去创建和管理它所依赖的组件。</p>
<p>Bean生命周期：</p>
<p><img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/SpringBoot/Spring/0102.png" alt="img"></p>
<h3 id="2-1-SpringBoot-DevTools："><a href="#2-1-SpringBoot-DevTools：" class="headerlink" title="2.1 SpringBoot DevTools："></a>2.1 SpringBoot DevTools：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>代码变更自动重启，即<strong>热部署</strong>（有三种方式，devtools只是一种）：<ul>
<li>DevTools运行时，应用程序会被加载到JVM两个独立的类加载器中，一个类加载器加载依赖的库，不常变化，另一个类加载器加载java代码、属性文件以及<code>src/main/</code>的文件，经常发生变化；</li>
<li>当探测到变更的时候，DevTools会且仅重新加载包含项目代码的类加载器，并重启Spring的应用上下文</li>
</ul>
</li>
<li>面向浏览器的资源如模板、JS、CSS发生变化时，自动刷新浏览器；</li>
<li>自动禁用模板缓存，相当于Thymeleaf模板在配置文件手动关闭缓存（部署到生产环境时要打开缓存，缓存只在第一次请求时解析一次）；</li>
<li>如果使用H2数据库，能内置H2控制台；</li>
</ul>
<h3 id="2-2-Controller（控制器层）："><a href="#2-2-Controller（控制器层）：" class="headerlink" title="2.2 Controller（控制器层）："></a>2.2 Controller（控制器层）：</h3><blockquote>
<p>整个框架服务调用过程为：实体层创建实体对象、数据访问层根据实体对象连接数据库操作、服务层对数据访问层的方法进行再次封装实现具体服务，控制器层调用服务实现请求响应。</p>
</blockquote>
<p>填充数据模型Model：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删去了具体内容，只留下了Model部分展示</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmployeesController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/employees&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAllEmployees</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;emps&quot;</span>,employees);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;employee/list&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>请求访问该<code>/employees</code>路径时，Model对象model在方法中以参数形式传入用于增加具体属性，存放在Model属性中的数据将会复制到Servlet request的属性中，视图<code>employee/list</code>从Servlet Response获取Model属性数据；</li>
<li>视图层无法直接感知Spring的模型抽象，无法获取Model属性数据，只能通过第三方Servlet的属性协作获取数据；</li>
</ul>
<p>与Config视图映射比较：</p>
<ul>
<li>Config继承<code>WebMvcConfigurer</code>并重写<code>addViewControllers</code>方法：<ul>
<li>该视图映射仅实现路由跳转，而没有Controller中的Model和View交互，一般用于统一配置无动作视图；</li>
<li>本质上是自动生成了简单的视图控制器；</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 视图映射</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/index.html&quot;</span>).setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">        <span class="comment">// 将所有/main.html路径全部映射到dashboard页面</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/main.html&quot;</span>).setViewName(<span class="string">&quot;dashboard&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-数据交互"><a href="#3-数据交互" class="headerlink" title="3.数据交互"></a>3.数据交互</h2><h3 id="3-1-Spring-JdbcTemplate："><a href="#3-1-Spring-JdbcTemplate：" class="headerlink" title="3.1 Spring JdbcTemplate："></a>3.1 Spring JdbcTemplate：</h3><ul>
<li>JdbcTemplate 实现了增删改查方法，不过需要自己显式写入sql语句放入方法传参；</li>
<li>也可以通过占位符传参，具体实战可以参看本人博客SpringBoot系列</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Template是Spring默认配置好的模板bean，可以拿来即用</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询数据库所有信息，没有实体类时使用Map获取数据库中的数据</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/userList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Map&lt;String,Object&gt;&gt; userList()&#123;</span><br><span class="line">    String sql = <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">    List&lt;Map&lt;String,Object&gt;&gt; mapList = jdbcTemplate.queryForList(sql);</span><br><span class="line">    <span class="keyword">return</span> mapList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="3-2-Spring-Data-JPA："><a href="#3-2-Spring-Data-JPA：" class="headerlink" title="3.2 Spring Data JPA："></a>3.2 Spring Data JPA：</h3><blockquote>
<p>Spring Data 由多个子项目组成，其中大多数子项目都关注对不同的数据库类型进行数据持久化。JPA即Java Persistence API，java持久层API。</p>
</blockquote>
<p>比较流行的一些Spring Data子项目包括：</p>
<ul>
<li>Spring Data JPA：基于关系型数据库进行JPA持久化；</li>
<li>Spring Data MongoDB：持久化到MongoDB文档数据库；</li>
<li>Spring Data Neo4j：持久化到Neo4j图数据库；</li>
<li>Spring Data Redis：持久化到Redis key-value存储；</li>
<li>Spring Data Cassandra：持久化到Cassandra数据库；</li>
</ul>
<p>Spring Data 为所有项目提供了一项特性：基于repository规范接口自动生成repository的功能。</p>
<ol>
<li><p>添加Spring Data JPA的Maven依赖：默认传递性引入Hibernate的JPA实现</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>映射注解标注实体类：</p>
<ul>
<li>类级@Entity注解；</li>
<li>id属性使用@Id注解；</li>
<li>类级@NoArgsConstructor（Lombok无参构造）；</li>
</ul>
</li>
<li><p>声明JPA repository：继承相应接口，如CrudRepository能自动实现增删查改接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">repository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">pojo</span>,<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中第一个参数pojo是相应实体类，第二个接口是响应实体类中@Id标注属性的数据类型；</li>
</ul>
</li>
<li><p>当然，除继承JPA repository外，还可以自定义JPA repository，这里不赘述；</p>
</li>
</ol>
<p>推荐一篇Spring Data JPA文章：<a target="_blank" rel="noopener external nofollow noreferrer" href="https://blog.csdn.net/wujiaqi0921/article/details/78789087">https://blog.csdn.net/wujiaqi0921/article/details/78789087</a></p>
<h2 id="4-SpringSecurity"><a href="#4-SpringSecurity" class="headerlink" title="4.SpringSecurity"></a>4.SpringSecurity</h2><blockquote>
<p>本部分具体实战可观看本人SpringBoot系列。</p>
</blockquote>
<ol>
<li><p>启用SpringSecurity，添加maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置SpringSecurity：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringSecurity配置用户存储有以下几种方式，都是通过<strong>认证</strong>实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重写configure(AuthenticationManagerBuilder auth)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>基于内存的用户存储：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 此处密码未加密,直接存储信息于内存中</span></span><br><span class="line">    auth.inMemoryAuthentication()</span><br><span class="line">        .withUser(<span class="string">&quot;admin&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).authorities(<span class="string">&quot;ROLE_ADMIN&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .withUser(<span class="string">&quot;root&quot;</span>).password(<span class="string">&quot;123456&quot;</span>).authorities(<span class="string">&quot;ROLE_ROOT&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基于JDBC的用户存储：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置一个数据源</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DataSource dataSource;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	auth.jdbcAuthentication().dataSource(dataSource)</span><br><span class="line">        .usersByUsernameQuery(<span class="string">&quot;select username,password,enable from Users&quot;</span> + <span class="string">&quot;where username=?&quot;</span>)</span><br><span class="line">        .authoritiesByUsernameQuery(<span class="string">&quot;select username,authority from UserAuthorities&quot;</span> + <span class="string">&quot;where username=?&quot;</span>)</span><br><span class="line">        .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder());</span><br><span class="line">    <span class="comment">// passwordEncoder为密码转码器，数据库中的密码不会解码（已转码），只对登录时的密码进行转码匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SpringSecurity加密模块：也可以尝试自定义加密</p>
<table>
<thead>
<tr>
<th>BCryptPasswordEncoder</th>
<th>使用bcrypt强哈希加密</th>
</tr>
</thead>
<tbody><tr>
<td>NoOpPasswordEncoder</td>
<td>不进行任何转码，已弃用</td>
</tr>
<tr>
<td>Pbkdf2PasswordEncoder</td>
<td>使用PBKDF2加密</td>
</tr>
<tr>
<td>SCryptPasswordEncoder</td>
<td>使用scrypt哈希加密</td>
</tr>
<tr>
<td>StandardPasswordEncoder</td>
<td>使用SHA-256哈希加密，已弃用</td>
</tr>
</tbody></table>
</li>
<li><p>以LDAP作为后端的用户存储：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 分别搜索用户和组，提供基础查询和提供过滤</span></span><br><span class="line">    <span class="comment">// passwordCompare比对认证方式是在LDAP服务期内完成的实际密码能保持私密，并对密码转码以及设置配对的密码属性</span></span><br><span class="line">    <span class="comment">// 引用远程LDAP服务器或配置嵌入式LDAP服务器</span></span><br><span class="line">    auth.ldapAuthentication()</span><br><span class="line">        .userSearchBase(<span class="string">&quot;ou=people&quot;</span>)</span><br><span class="line">        .userSearchFilter(<span class="string">&quot;(uid=&#123;0&#125;)&quot;</span>)</span><br><span class="line">        .groupSearchBase(<span class="string">&quot;ou=groups&quot;</span>)</span><br><span class="line">        .groupSearchFilter(<span class="string">&quot;member=&#123;0&#125;&quot;</span>)</span><br><span class="line">        .passwordCompare()</span><br><span class="line">        .passwordEncoder(<span class="keyword">new</span> BCryptPasswordEncoder())</span><br><span class="line">        .passwordAttribute(<span class="string">&quot;passcode&quot;</span>)</span><br><span class="line">        .and()</span><br><span class="line">        .contextSource()</span><br><span class="line">        .root(<span class="string">&quot;dc=com&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义用户详情服务：</p>
<ul>
<li>定义实体用户类以及持久化JPA(@Entity)实现SpringSecurity的UserDetails接口；</li>
<li>重写getAuthorities方法获取用户权限；</li>
<li>相应创建用户详情服务实现UserDetailsService接口；</li>
</ul>
</li>
<li><p>对于密码转码器，可以配置一个默认转码器统一转码所有密码，加入Bean：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 由于Bean注解在Spring应用上下文中申明PasswordEncoder bean，对于encoder()的任何调用都会被拦截，并且返回应用上下文中的bean实例</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">encoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    auth.userDetailsService(userDetailsService)</span><br><span class="line">        .passwordEncoder(encoder());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h3 id="4-1-用户注册"><a href="#4-1-用户注册" class="headerlink" title="4.1 用户注册"></a>4.1 用户注册</h3><ol>
<li><p><code>RegistrationController</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationController</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> UserRepository userRepo;</span><br><span class="line">  <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RegistrationController</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      UserRepository userRepo, PasswordEncoder passwordEncoder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userRepo = userRepo;</span><br><span class="line">    <span class="keyword">this</span>.passwordEncoder = passwordEncoder;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">registerForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;registration&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// save方法是CrudRepository接口中定义的，即增加一个新的实体账号</span></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(RegistrationForm form)</span> </span>&#123;</span><br><span class="line">    userRepo.save(form.toUser(passwordEncoder));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/login&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>增加表单视图<code>registration</code>；</p>
</li>
<li><p>增加实体类<code>RegistrationForm</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistrationForm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String username;</span><br><span class="line">  <span class="keyword">private</span> String password;</span><br><span class="line">  <span class="keyword">private</span> String fullname;</span><br><span class="line">  <span class="keyword">private</span> String street;</span><br><span class="line">  <span class="keyword">private</span> String city;</span><br><span class="line">  <span class="keyword">private</span> String state;</span><br><span class="line">  <span class="keyword">private</span> String zip;</span><br><span class="line">  <span class="keyword">private</span> String phone;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">toUser</span><span class="params">(PasswordEncoder passwordEncoder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(</span><br><span class="line">        username, passwordEncoder.encode(password), </span><br><span class="line">        fullname, street, city, state, zip, phone);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h3 id="4-2-保护Web请求"><a href="#4-2-保护Web请求" class="headerlink" title="4.2 保护Web请求"></a>4.2 保护Web请求</h3><p>通过configure(HttpSecurity http)<strong>权限</strong>设置保护：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可配置功能包括：</p>
<ul>
<li>请求拦截；</li>
<li>配置自定义登录页以及登录跳转页；</li>
<li>支持用户退出登录以及退出跳转页；</li>
<li>预防跨站请求伪造CSRF；</li>
<li>……</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// authorizeRequests权限请求，具备相应权限才能访问/design、/orders路径，且不同antMatchers顺序很重要，前序优先级高</span></span><br><span class="line">    <span class="comment">// 设置权限方法一hasRole(&#x27;ROLE_USER&#x27;)、permitAll，方法二是access()，后者能通过表达式丰富安全规则</span></span><br><span class="line">    http</span><br><span class="line">      .authorizeRequests()</span><br><span class="line">      .antMatchers(<span class="string">&quot;/design&quot;</span>, <span class="string">&quot;/orders&quot;</span>)</span><br><span class="line">      .access(<span class="string">&quot;hasRole(&#x27;ROLE_USER&#x27;)&quot;</span>)</span><br><span class="line">      .antMatchers(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/**&quot;</span>).access(<span class="string">&quot;permitAll&quot;</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// formLogin()下loginPage()替换内置登录页</span></span><br><span class="line">      <span class="comment">// defaulySuccessUrl(&quot;&quot;,true)有true登录则强制跳转，没有则只默认跳转，如登录前已经访问页面则跳转相应页面</span></span><br><span class="line">      <span class="comment">// loginProcessingUrl()监听对/authenticated的请求并设置username/password参数对应form表单参数</span></span><br><span class="line">      .and()</span><br><span class="line">      .formLogin()</span><br><span class="line">      .loginPage(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">      .defaulySuccessUrl(<span class="string">&quot;/design&quot;</span>)</span><br><span class="line">      .loginProcessingUrl(<span class="string">&quot;/authenticated&quot;</span>)</span><br><span class="line">      .usernameParameter(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// logout()退出，下设logoutSuccessUrl()退出成功跳转</span></span><br><span class="line">      .and()</span><br><span class="line">      .logout()</span><br><span class="line">      .logoutSuccessUrl(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 预防CSRF方法是在表单中增加一个隐藏域存放CSRF token，随着表单提交一起提交</span></span><br><span class="line">      <span class="comment">// SpringSecurity提供内置CSRF保护，默认开启，需要确保表单中有一个名为&quot;_csrf&quot;的字段持有CSRF token</span></span><br><span class="line">      <span class="comment">// &lt;input type=&quot;hidden&quot; name=&quot;_csrf&quot; th:value=&quot;$&#123;_csrf.token&#125;&quot; /&gt;</span></span><br><span class="line">      <span class="comment">// 使用SpringMVC的JSP标签库或者SpringSecurity-Thymeleaf则不需要明确包含这个隐藏域（相关实战请参考本人博客SpringBoot系列）</span></span><br><span class="line">      .and()</span><br><span class="line">      .csrf()</span><br><span class="line">      .ignoringAntMatchers(<span class="string">&quot;/h2-console/**&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>authorizeRequests()拦截路径配置：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>access(String)</td>
<td>给定的SpEL表达式结果为true，允许访问</td>
</tr>
<tr>
<td>anonymous()</td>
<td>允许匿名用户访问</td>
</tr>
<tr>
<td>authenticated()</td>
<td>允许认证过的用户访问</td>
</tr>
<tr>
<td>denyAll()</td>
<td>无条件拒绝所有访问</td>
</tr>
<tr>
<td>fullyAuthenticated()</td>
<td>用户不是通过rememberMe功能认证的，就允许访问</td>
</tr>
<tr>
<td>hasAnyAuthority(String…)</td>
<td>用户具备给定权限中的一种则允许访问</td>
</tr>
<tr>
<td>hasAnyRole(String…)</td>
<td>用户具备给定角色中的一种则允许访问</td>
</tr>
<tr>
<td>hasAuthority(String)</td>
<td>用户具备给定权限则允许访问</td>
</tr>
<tr>
<td>hasIpAddress(String)</td>
<td>请求来自给定的IP地址则允许访问</td>
</tr>
<tr>
<td>hasRole(String)</td>
<td>用户具备给定角色则允许访问</td>
</tr>
<tr>
<td>not()</td>
<td>对其它访问方法结果求反</td>
</tr>
<tr>
<td>permitAll()</td>
<td>无条件允许所有访问</td>
</tr>
<tr>
<td>rememberMe()</td>
<td>用户通过rememberMe功能认证则允许访问</td>
</tr>
</tbody></table>
</li>
<li><p>access()的扩展SpEL：</p>
<table>
<thead>
<tr>
<th>安全表达式</th>
<th>计算结果</th>
</tr>
</thead>
<tbody><tr>
<td>authentication</td>
<td>用户的认证对象</td>
</tr>
<tr>
<td>denyAll</td>
<td>结果始终为false</td>
</tr>
<tr>
<td>hasAnyRole(list of roles)</td>
<td>如果用户被授予了列表中任意指定角色，结果为true</td>
</tr>
<tr>
<td>hasRole(role)</td>
<td>如果用户被授予了指定角色，结果为true</td>
</tr>
<tr>
<td>hasIpAddress(IP Address)</td>
<td>如果请求来自指定IP，结果为true</td>
</tr>
<tr>
<td>isAnonymous()</td>
<td>如果当前用户为匿名用户，结果为true</td>
</tr>
<tr>
<td>isAuthenticated()</td>
<td>如果当前用户进行了认证，结果为true</td>
</tr>
<tr>
<td>isFullyAuthenticated()</td>
<td>如果当前用户不是通过rememberMe功能进行的认证，结果为true</td>
</tr>
<tr>
<td>isRememberMe()</td>
<td>如果当前用户是通过RememberMe功能进行的认证，结果为true</td>
</tr>
<tr>
<td>permitAll</td>
<td>结果始终为true</td>
</tr>
<tr>
<td>principal</td>
<td>用户的principal对象</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="4-3-获取登录用户信息"><a href="#4-3-获取登录用户信息" class="headerlink" title="4.3 获取登录用户信息"></a>4.3 获取登录用户信息</h3><p>常用方式：</p>
<ul>
<li><p>注入Principal对象到控制器方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 能够正常运行，但是在与安全无关的功能中掺杂了安全性的代码</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(<span class="meta">@Valid</span> Order order, Errors errors,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 SessionStatus sessionStatus,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Principal principal)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    	User user = userRepository.findByUsername(principal.getName());</span><br><span class="line">    	order.setUser(user);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>注入Authentication对象到控制器方法中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getPrincipal()返回的是java.lang.Object对象，需要转换数据类型</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(<span class="meta">@Valid</span> Order order, Errors errors,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 SessionStatus sessionStatus,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Authentication authentication)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    	User user = (User) authentication.getPrincipal();</span><br><span class="line">    	order.setUser(user);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用SecurityContextHolder来获取安全上下文：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法包含大量安全性代码，但是优势是可以在程序的任何地方使用，不仅仅在控制器中，非常适合在较低级别的代码中使用</span></span><br><span class="line">Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">User user = (User)authentication.getPrincipal();</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用@AuthenticationPrincipal注解来标注方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种方式更为简洁，直接接收一个User参数，但是需要添加注解通过认证才会变成认证的令牌</span></span><br><span class="line"><span class="comment">// 且该方式不需要类型转换，同时能将安全相关的代码紧紧局限于注解本身</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">processRegistration</span><span class="params">(<span class="meta">@Valid</span> Order order, Errors errors,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 SessionStatus sessionStatus,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="meta">@AuthenticationPrincipal</span> User user)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    	<span class="keyword">if</span>(errors.hasErrors())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;orderForm&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    	order.setUser(user);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>TODO-&gt;principal、authentication、SecurityContextHolder在生命周期中的位置；</p>
</li>
</ul>
<h2 id="5-配置"><a href="#5-配置" class="headerlink" title="5.配置"></a>5.配置</h2><p>在Spring中有两种配置：</p>
<ul>
<li>bean装配：声明在Spring应用上下文中创建哪些应用组件以及它们之间如何互相注入的配置；</li>
<li>属性注入：设置Spring应用上下文中bean的<strong>值</strong>的配置；</li>
</ul>
<p>Spring环境抽象：</p>
<ul>
<li>属性源：<ul>
<li>JVM系统属性；</li>
<li>操作系统环境变量；</li>
<li>命令行参数；</li>
<li>Application.properties；</li>
<li>Application.yml；</li>
</ul>
</li>
<li>Spring环境从各个属性源拉取属性，并让Spring应用上下文中的bean使用它们；</li>
<li>在yml文件中设置属性的时候可以使用<code>$&#123;&#125;</code>占位符；</li>
</ul>
<img src="https://cdn.jsdelivr.net/gh/ZHAOXIAOAN/CDNBlog/Img/SpringBoot/Spring/0103.png" alt="image-20210408211818632" style="zoom:80%;">



<h3 id="5-1-创建自己的配置属性"><a href="#5-1-创建自己的配置属性" class="headerlink" title="5.1 创建自己的配置属性"></a>5.1 创建自己的配置属性</h3><p>以书籍源码ch05为例。</p>
<p>为了支持配置属性的诸如，Spring Boot提供了@ConfigurationProperties注解，在<code>OrderController</code>中添加方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orders&quot;)</span></span><br><span class="line"><span class="meta">@SessionAttributes(&quot;order&quot;)</span></span><br><span class="line"><span class="comment">// 意味着设置pageSize时要使用名为taco.orders.page-size属性</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;taco.orders&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">20</span>;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ordersForUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@AuthenticationPrincipal</span> User user, Model model)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// 增加属性用于配置数量值，Pageable是Spring Data格局页号和煤业数量选取结果的子集的一种方法</span></span><br><span class="line">        <span class="comment">// 源码中是将自定义配置属性单独拎出来作为一个配置属性类</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, pageSize);</span><br><span class="line">        <span class="comment">// 在OrderRepository接口中增加findByUserOrderByPlacedAtDesc()方法，设置数量降序排列</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;orders&quot;</span>,</span><br><span class="line">                           orderRepo.findByUserOrderByPlacedAtDesc(user, pageable));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;orderList&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注入bean并单独持有配置属性：</p>
<ul>
<li>@ConfigurationProperties实际上通常会放到一种特定类型的bean中，这种bean的目的就是持有配置数据;</li>
<li>这样能够更加整洁，并且其余代码部分也能引用此属性；</li>
</ul>
<ol>
<li><p>创建配置类<code>OrderProps</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Component注解会将其扫描成bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;taco.orders&quot;)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderProps</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Min(value=5, message=&quot;must be between 5 and 25&quot;)</span></span><br><span class="line">  <span class="meta">@Max(value=25, message=&quot;must be between 5 and 25&quot;)</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> pageSize = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接在<code>OrderController</code>中引用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/orders&quot;)</span></span><br><span class="line"><span class="meta">@SessionAttributes(&quot;order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OrderProps props;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ordersForUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="meta">@AuthenticationPrincipal</span> User user, Model model)</span> </span>&#123;</span><br><span class="line">	    <span class="comment">// 增加属性用于配置数量值，Pageable是Spring Data格局页号和煤业数量选取结果的子集的一种方法</span></span><br><span class="line">        <span class="comment">// 源码中是将自定义配置属性单独拎出来作为一个配置属性类</span></span><br><span class="line">        Pageable pageable = PageRequest.of(<span class="number">0</span>, props.getPageSize);</span><br><span class="line">        <span class="comment">// 在OrderRepository接口中增加findByUserOrderByPlacedAtDesc()方法，设置数量降序排列</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;orders&quot;</span>,</span><br><span class="line">                           orderRepo.findByUserOrderByPlacedAtDesc(user, pageable));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;orderList&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>声明配置属性元数据：不声明也可以在yml中使用，但是会没有提示</p>
<ul>
<li><p>在项目路径<code>src/main/resources/META-INF</code>目录下新建文件<code>additional-spring-configuration-metadata.json</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对了，注意在yml文件中pageSize属性可以使用page-size表示</span></span><br><span class="line">&#123;<span class="string">&quot;properties&quot;</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;taco.orders.page-size&quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;java.lang.String&quot;</span>,</span><br><span class="line">    <span class="string">&quot;description&quot;</span>: <span class="string">&quot;Sets the maximum number of orders to display in a list.&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ol>
<h3 id="5-2-使用profile进行配置"><a href="#5-2-使用profile进行配置" class="headerlink" title="5.2 使用profile进行配置"></a>5.2 使用profile进行配置</h3><blockquote>
<p>当应用部署到不同的运行时环境时，有些配置细节会有差异，通常使用环境变量这种方式来制定配置属性解决问题，而不是在yml文件中进行定义。</p>
</blockquote>
<p>定义特定profile相关的属性的两种方式：</p>
<ul>
<li><p>创建另一个yml或属性文件，命名遵守约定：<code>application-&#123;profile&#125;.yml</code>或<code>application-&#123;profile&#125;.properties</code>；</p>
</li>
<li><p>在<code>application.yml</code>文件中通过<code>---</code>符号分割，并使用spring.profiles属性命名profile：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">taco:</span></span><br><span class="line">  <span class="attr">orders:</span></span><br><span class="line">    <span class="attr">pageSize:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">discount:</span></span><br><span class="line">    <span class="attr">codes:</span></span><br><span class="line">      <span class="attr">abcdef:</span> <span class="number">10</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> <span class="string">prod</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost/tacocloud</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">tacouser</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">tacopassword</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>激活profile：</p>
<ul>
<li><p>方式一：不好，意味着一直默认开启某一个profile，这体现不出不同profile的优越处</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span> </span><br><span class="line">  	<span class="attr">active:</span></span><br><span class="line">  	<span class="bullet">-</span> <span class="string">prod</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>方法二：通过环境变量配置，一般使用这种方式</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">% <span class="built_in">export</span> SPRING_PROFILES_ACTIVE=prod</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="5-3-在不同profile条件下条件化创建bean"><a href="#5-3-在不同profile条件下条件化创建bean" class="headerlink" title="5.3 在不同profile条件下条件化创建bean"></a>5.3 在不同profile条件下条件化创建bean</h3><p>增加@Profile注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Profile(&#123;&quot;dev&quot;,&quot;prod&quot;&#125;)</span></span><br><span class="line"><span class="comment">// 或者取反</span></span><br><span class="line"><span class="meta">@Profile(&quot;!dev&quot;)</span></span><br></pre></td></tr></table></figure>



<p>OK，Spring实战第一部分Spring基础就到这里了，大家想要详细实战的话可以参看本人博客SpringBoot系列。</p>

    </div>

    
    
    

  
         <div>
           <div>
  
    <div style="text-align:center;color:#bfbfbf;font-size:16px;">
      <span>-------- 本文结束 </span>
      <i class="fa fa-paw"></i>
      <span> 感谢阅读 --------</span>
    </div>
  
</div>

         </div>
       
      
  <div class="popular-posts-header">相关文章推荐# Custom header, leave empty to use the default one</div>
  <ul class="popular-posts">
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\2021\03\10\SpringBoot\SpringBoot（四）——数据库连接（整合Mybatis）\" rel="bookmark">SpringBoot(四)——数据库连接（整合Mybatis）</a></div>
    </li>
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\2021\03\06\SpringBoot\SpringBoot（二）——Thymeleaf及MVC装配扩展\" rel="bookmark">SpringBoot(二)——Thymeleaf及MVC装配扩展</a></div>
    </li>
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\2020\10\23\SpringBoot\SpringBoot（一）——自动装配原理\" rel="bookmark">SpringBoot(一)——自动装配原理</a></div>
    </li>
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\2021\03\12\SpringBoot\SpringBoot（五）——SpringSecurity和Shiro\" rel="bookmark">SpringBoot(五)——SpringSecurity和Shiro</a></div>
    </li>
    <li class="popular-posts-item">
      <div class="popular-posts-title"><a href="\2021\03\06\SpringBoot\SpringBoot（三）——员工管理系统（无数据库）\" rel="bookmark">SpringBoot(三)——员工管理系统（已增数据库）</a></div>
    </li>
  </ul>





    <footer class="post-footer">
          

<div class="post-copyright">
<ul>
  <li class="post-copyright-author">
      <strong>本文作者： </strong>Zhaoxiaoan
  </li>
  <li class="post-copyright-link">
      <strong>本文链接：</strong>
      <a href="http://kunpw.cn/Spring/article01" title="Spring实战(一)——Spring基础（含Spring实战第五版源码和pdf）">http://kunpw.cn/Spring/article01</a>
  </li>
  <li class="post-copyright-license">
    <strong>版权声明： </strong>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" rel="noopener external nofollow noreferrer" target="_blank"><i class="fab fa-fw fa-creative-commons"></i>BY-NC-SA</a> 许可协议。转载请注明出处！
  </li>
</ul>
</div>

          <div class="post-tags">
              <a href="/tags/java/" rel="tag"><i class="fa fa-tag"></i> java</a>
              <a href="/tags/SpringBoot/" rel="tag"><i class="fa fa-tag"></i> SpringBoot</a>
          </div>

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/2021/03/25/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%AC%AC%E4%B8%89%E7%AB%A0.%E5%88%86%E5%B8%83%E5%BC%8F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80/" rel="prev" title="分布式系统设计学习笔记（二）分布式程序设计语言">
                  <i class="fa fa-chevron-left"></i> 分布式系统设计学习笔记（二）分布式程序设计语言
                </a>
            </div>
            <div class="post-nav-item">
            </div>
          </div>
    </footer>
  </article>

  
  
  



      
    <div class="comments" id="valine-comments"></div>

<script>
  window.addEventListener('tabs:register', () => {
    let { activeClass } = CONFIG.comments;
    if (CONFIG.comments.storage) {
      activeClass = localStorage.getItem('comments_active') || activeClass;
    }
    if (activeClass) {
      const activeTab = document.querySelector(`a[href="#comment-${activeClass}"]`);
      if (activeTab) {
        activeTab.click();
      }
    }
  });
  if (CONFIG.comments.storage) {
    window.addEventListener('tabs:click', event => {
      if (!event.target.matches('.tabs-comment .tab-content .tab-pane')) return;
      const commentClass = event.target.classList[1];
      localStorage.setItem('comments_active', commentClass);
    });
  }
</script>

    </div>
  </main>

  <footer class="footer">
    <div class="footer-inner">
      

      

<span id="timeDate" style="color: green;">载入天数...</span>
<span id="times" style="color: green;">载入时分秒...</span>
<script>
    var now = new Date();
    function createtime() {
        var grt= new Date("09/06/2020 13:38:49");//在此处修改你的建站时间，格式：月/日/年 时:分:秒
        now.setTime(now.getTime()+250);
        days = (now - grt ) / 1000 / 60 / 60 / 24; dnum = Math.floor(days);
        hours = (now - grt ) / 1000 / 60 / 60 - (24 * dnum); hnum = Math.floor(hours);
        if(String(hnum).length ==1 ){hnum = "0" + hnum;} minutes = (now - grt ) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);
        mnum = Math.floor(minutes); if(String(mnum).length ==1 ){mnum = "0" + mnum;}
        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);
        snum = Math.round(seconds); if(String(snum).length ==1 ){snum = "0" + snum;}
        document.getElementById("timeDate").innerHTML = "本站已安全运行 "+dnum+" 天 ";
        document.getElementById("times").innerHTML = hnum + " 小时 " + mnum + " 分 " + snum + " 秒";
    }
setInterval("createtime()",250);
</script>



<div>
<script async src="//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>
<span id="busuanzi_container_site_pv" style='display:none'>
    本站总访问量 <span id="busuanzi_value_site_pv"></span> 次
    <span class="post-meta-divider">|</span>
</span>
<span id="busuanzi_container_site_uv" style='display:none'>
    有<span id="busuanzi_value_site_uv"></span>人看过我的博客啦
</span>
</div>

<div class="copyright">
  
  &copy; 2020 – 
  <span itemprop="copyrightYear">2021</span>
  <a src="https://beian.miit.gov.cn">湘ICP备2021000832号</a>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Zhaoxiaoan</span>
</div>
<div class="wordcount">
  <span class="post-meta-item">
    <span class="post-meta-item-icon">
      <i class="fa fa-chart-line"></i>
    </span>
      <span>站点总字数：</span>
    <span title="站点总字数">301k</span>
  </span>
  <span class="post-meta-item">
    <span class="post-meta-item-icon">
      <i class="fa fa-coffee"></i>
    </span>
      <span>站点阅读时长 &asymp;</span>
    <span title="站点阅读时长">4:33</span>
  </span>
</div>
<div class="busuanzi-count">
    <span class="post-meta-item" id="busuanzi_container_site_uv" style="display: none;">
      <span class="post-meta-item-icon">
        <i class="fa fa-user"></i>
      </span>
      <span class="site-uv" title="总访客量">
        <span id="busuanzi_value_site_uv"></span>
      </span>
    </span>
    <span class="post-meta-item" id="busuanzi_container_site_pv" style="display: none;">
      <span class="post-meta-item-icon">
        <i class="fa fa-eye"></i>
      </span>
      <span class="site-pv" title="总访问量">
        <span id="busuanzi_value_site_pv"></span>
      </span>
    </span>
</div>
  <div class="powered-by">由 <a href="https://hexo.io/" class="theme-link" rel="noopener external nofollow noreferrer" target="_blank">Hexo</a> & <a href="https://theme-next.js.org/" class="theme-link" rel="noopener external nofollow noreferrer" target="_blank">NexT.Gemini</a> 强力驱动
  </div>

    </div>
  </footer>

  
  <script src="//cdn.jsdelivr.net/npm/animejs@3.2.0/lib/anime.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/@next-theme/pjax@0.4.0/pjax.min.js"></script>
<script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/next-boot.js"></script>
  <script>
var pjax = new Pjax({
  selectors: [
    'head title',
    '.page-configurations',
    '.main-inner',
    '.post-toc-wrap',
    '.languages',
    '.pjax'
  ],
  analytics: false,
  cacheBust: false,
  scrollRestoration: false,
  scrollTo: !CONFIG.bookmark.enable
});

document.addEventListener('pjax:success', () => {
  pjax.executeScripts(document.querySelectorAll('script[data-pjax], .pjax script'));
  NexT.boot.refresh();
  // Define Motion Sequence & Bootstrap Motion.
  if (CONFIG.motion.enable) {
    NexT.motion.integrator
      .init()
      .add(NexT.motion.middleWares.subMenu)
      .add(NexT.motion.middleWares.postList)
      .bootstrap();
  }
  const hasTOC = document.querySelector('.post-toc');
  document.querySelector('.sidebar-inner').classList.toggle('sidebar-nav-active', hasTOC);
  document.querySelector(hasTOC ? '.sidebar-nav-toc' : '.sidebar-nav-overview').click();
  NexT.utils.updateSidebarPosition();
});
</script>


  




  <script src="/js/local-search.js"></script>












  
  <script data-pjax async src="https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"></script>








    <div class="pjax">
  

  
<script>
NexT.utils.loadComments('#valine-comments', () => {
  NexT.utils.getScript('//cdn.jsdelivr.net/npm/valine@1.4.14/dist/Valine.min.js', () => {
    new Valine(Object.assign({
      el  : '#valine-comments',
      path: "/Spring/article01",
    }, {"enable":true,"appId":"9JxB7GVqlwRNk6oWQAWRFukK-MdYXbMMI","appKey":"0FRspDasEAKCPOgl62bwPGJ6","placeholder":"评论区走一波","avatar":"mm","meta":["nick","mail","link"],"pageSize":10,"lang":"zh-cn","visitor":false,"comment_count":true,"recordIP":false,"serverURLs":null,"enableQQ":false,"requiredFields":[],"emoticonUrl":["https://cdn.jsdelivr.net/npm/alus@latest","https://cdn.jsdelivr.net/gh/MiniValine/qq@latest","https://cdn.jsdelivr.net/gh/MiniValine/Bilibilis@latest","https://cdn.jsdelivr.net/gh/MiniValine/tieba@latest","https://cdn.jsdelivr.net/gh/MiniValine/twemoji@latest","https://cdn.jsdelivr.net/gh/MiniValine/weibo@latest"]}
    ));
  }, window.Valine);
});
</script>



<script src="https://sdk.jinrishici.com/v2/browser/jinrishici.js" charset="utf-8"></script>
<script type="text/javascript">
jinrishici.load(function(result) {
	var jrsc_plac =  result.data.content + "\n「" + result.data.origin.title + "」" + result.data.origin.dynasty + " · " + result.data.origin.author
	document.getElementById("veditor").setAttribute("placeholder",jrsc_plac);
});
</script>


  <script async src="/js/cursor/fireworks.js"></script>




  <script src="/js/write/activate-power-mode.min.js"></script>
  <script>
    POWERMODE.colorful = true;
    POWERMODE.shake = false;
    document.body.addEventListener('input', POWERMODE);
  </script>


    </div>
<script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"pluginRootPath":"live2dw/","pluginJsPath":"lib/","pluginModelPath":"assets/","tagMode":false,"debug":false,"model":{"jsonPath":"/live2dw/assets/hijiki.model.json"},"display":{"position":"left","width":150,"height":300},"mobile":{"show":true},"react":{"opacity":1},"log":false});</script></body>
</html>
